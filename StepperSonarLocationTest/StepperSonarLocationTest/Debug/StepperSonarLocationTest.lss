
StepperSonarLocationTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000004a0  00000534  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  00000536  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000536  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000568  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000096f  00000000  00000000  00000600  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006dc  00000000  00000000  00000f6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000505  00000000  00000000  0000164b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000012c  00000000  00000000  00001b50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a5  00000000  00000000  00001c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000474  00000000  00000000  00002121  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002595  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ea       	ldi	r30, 0xA0	; 160
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a3 01 	call	0x346	; 0x346 <main>
  9e:	0c 94 4e 02 	jmp	0x49c	; 0x49c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z16initialize_usartv>:
}

// Function to recieve the data
void initialize_usart(void) // function to set up USART
{
	UCSR0B = (1<<RXEN0); // enable serial transmission
  a6:	80 e1       	ldi	r24, 0x10	; 16
  a8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); // Asynchronous mode, 8-bit data; no parity; 1 stop bit
  ac:	86 e0       	ldi	r24, 0x06	; 6
  ae:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = 0x67; // 9,600 baud if Fosc = 16MHz
  b2:	87 e6       	ldi	r24, 0x67	; 103
  b4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  b8:	08 95       	ret

000000ba <_Z19delay_T_msec_timer1c>:
		delay_T_msec_timer1(time_choice);
		multiple--;
	}
}

void delay_T_msec_timer1(volatile char choice) {
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	1f 92       	push	r1
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
  c4:	89 83       	std	Y+1, r24	; 0x01
	//Default: T = .0156 msec for no prescaler and count of 250 (preload counter with 65,535-5)

	//Inputs: None
	//Outputs: None

	TCCR1A = 0x00; // clears WGM00 and WGM01 (bits 0 and 1) to ensure Timer/Counter is in normal mode.
  c6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCNT1 = 0;  // preload load TIMER1 with 5 if counting to 255 (count must reach 65,535-5 = 250)
  ca:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  ce:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	// or preload with 0 and count to 250

	switch ( choice ) { // choose prescaler
  d2:	89 81       	ldd	r24, Y+1	; 0x01
  d4:	82 30       	cpi	r24, 0x02	; 2
  d6:	69 f0       	breq	.+26     	; 0xf2 <_Z19delay_T_msec_timer1c+0x38>
  d8:	18 f4       	brcc	.+6      	; 0xe0 <_Z19delay_T_msec_timer1c+0x26>
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	31 f0       	breq	.+12     	; 0xea <_Z19delay_T_msec_timer1c+0x30>
  de:	17 c0       	rjmp	.+46     	; 0x10e <_Z19delay_T_msec_timer1c+0x54>
  e0:	83 30       	cpi	r24, 0x03	; 3
  e2:	59 f0       	breq	.+22     	; 0xfa <_Z19delay_T_msec_timer1c+0x40>
  e4:	84 30       	cpi	r24, 0x04	; 4
  e6:	79 f0       	breq	.+30     	; 0x106 <_Z19delay_T_msec_timer1c+0x4c>
  e8:	12 c0       	rjmp	.+36     	; 0x10e <_Z19delay_T_msec_timer1c+0x54>
		case 1:
		TCCR1B = 1<<CS11;//TCCR1B = 0x02; // Start TIMER1, Normal mode, crystal clock, prescaler = 8
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		break;
  f0:	07 c0       	rjmp	.+14     	; 0x100 <_Z19delay_T_msec_timer1c+0x46>
		case 2:
		TCCR1B =  1<<CS11 | 1<<CS10;//TCCR1B = 0x03;  // Start TIMER1, Normal mode, crystal clock, prescaler = 64
  f2:	83 e0       	ldi	r24, 0x03	; 3
  f4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		break;
  f8:	03 c0       	rjmp	.+6      	; 0x100 <_Z19delay_T_msec_timer1c+0x46>
		case 3:
		TCCR1B = 1<<CS12;//TCCR1B = 0x04; // Start TIMER1, Normal mode, crystal clock, prescaler = 256
  fa:	84 e0       	ldi	r24, 0x04	; 4
  fc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		break;
	}

	//while ((TIFR1 & (0x1<<TOV1)) == 0); // wait for TOV1 to roll over at 255 (requires preload of 65,535-5 to make count = 250)
	// How does this while loop work?? See notes
	while (TCNT1 < 0xfa); // exits when count = 250 (requires preload of 0 to make count = 250)
 100:	e4 e8       	ldi	r30, 0x84	; 132
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	08 c0       	rjmp	.+16     	; 0x116 <_Z19delay_T_msec_timer1c+0x5c>
		break;
		case 3:
		TCCR1B = 1<<CS12;//TCCR1B = 0x04; // Start TIMER1, Normal mode, crystal clock, prescaler = 256
		break;
		case 4:
		TCCR1B = 1<<CS12 | 1<<CS10;//TCCR1B = 0x05; // Start TIMER1, Normal mode, crystal clock, prescaler = 1024
 106:	85 e0       	ldi	r24, 0x05	; 5
 108:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		break;
 10c:	f9 cf       	rjmp	.-14     	; 0x100 <_Z19delay_T_msec_timer1c+0x46>
		default:
		TCCR1A = 1<<CS10;//TCCR1B = 0x01; Start TIMER1, Normal mode, crystal clock, no prescaler
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
		break;
 114:	f5 cf       	rjmp	.-22     	; 0x100 <_Z19delay_T_msec_timer1c+0x46>
	}

	//while ((TIFR1 & (0x1<<TOV1)) == 0); // wait for TOV1 to roll over at 255 (requires preload of 65,535-5 to make count = 250)
	// How does this while loop work?? See notes
	while (TCNT1 < 0xfa); // exits when count = 250 (requires preload of 0 to make count = 250)
 116:	80 81       	ld	r24, Z
 118:	91 81       	ldd	r25, Z+1	; 0x01
 11a:	8a 3f       	cpi	r24, 0xFA	; 250
 11c:	91 05       	cpc	r25, r1
 11e:	d8 f3       	brcs	.-10     	; 0x116 <_Z19delay_T_msec_timer1c+0x5c>

	TCCR1B = 0x00; // Stop TIMER1
 120:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	//TIFR1 = 0x1<<TOV1;  // Clear TOV1 (note that this is an odd bit in that it
	//is cleared by writing a 1 to it)

} // end delay_T_msec_timer1()
 124:	0f 90       	pop	r0
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	08 95       	ret

0000012c <_Z4waitic>:
	UCSR0B = (1<<RXEN0); // enable serial transmission
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); // Asynchronous mode, 8-bit data; no parity; 1 stop bit
	UBRR0L = 0x67; // 9,600 baud if Fosc = 16MHz
}

void wait(volatile int multiple, volatile char time_choice) {
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	00 d0       	rcall	.+0      	; 0x132 <_Z4waitic+0x6>
 132:	1f 92       	push	r1
 134:	cd b7       	in	r28, 0x3d	; 61
 136:	de b7       	in	r29, 0x3e	; 62
 138:	9a 83       	std	Y+2, r25	; 0x02
 13a:	89 83       	std	Y+1, r24	; 0x01
 13c:	6b 83       	std	Y+3, r22	; 0x03
	while (multiple > 0) {
 13e:	89 81       	ldd	r24, Y+1	; 0x01
 140:	9a 81       	ldd	r25, Y+2	; 0x02
 142:	18 16       	cp	r1, r24
 144:	19 06       	cpc	r1, r25
 146:	9c f4       	brge	.+38     	; 0x16e <_Z4waitic+0x42>
		delay_T_msec_timer1(time_choice);
 148:	8b 81       	ldd	r24, Y+3	; 0x03
 14a:	0e 94 5d 00 	call	0xba	; 0xba <_Z19delay_T_msec_timer1c>
		if (ButtonValue > 32)
 14e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <ButtonValue>
 152:	81 32       	cpi	r24, 0x21	; 33
 154:	10 f0       	brcs	.+4      	; 0x15a <_Z4waitic+0x2e>
			multiple = 0;
 156:	1a 82       	std	Y+2, r1	; 0x02
 158:	19 82       	std	Y+1, r1	; 0x01
		multiple--;
 15a:	89 81       	ldd	r24, Y+1	; 0x01
 15c:	9a 81       	ldd	r25, Y+2	; 0x02
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	9a 83       	std	Y+2, r25	; 0x02
 162:	89 83       	std	Y+1, r24	; 0x01
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); // Asynchronous mode, 8-bit data; no parity; 1 stop bit
	UBRR0L = 0x67; // 9,600 baud if Fosc = 16MHz
}

void wait(volatile int multiple, volatile char time_choice) {
	while (multiple > 0) {
 164:	89 81       	ldd	r24, Y+1	; 0x01
 166:	9a 81       	ldd	r25, Y+2	; 0x02
 168:	18 16       	cp	r1, r24
 16a:	19 06       	cpc	r1, r25
 16c:	6c f3       	brlt	.-38     	; 0x148 <_Z4waitic+0x1c>
		delay_T_msec_timer1(time_choice);
		if (ButtonValue > 32)
			multiple = 0;
		multiple--;
	}
}
 16e:	0f 90       	pop	r0
 170:	0f 90       	pop	r0
 172:	0f 90       	pop	r0
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	08 95       	ret

0000017a <_Z12wait_stepperic>:

void wait_stepper(volatile int multiple, volatile char time_choice) {
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	00 d0       	rcall	.+0      	; 0x180 <_Z12wait_stepperic+0x6>
 180:	1f 92       	push	r1
 182:	cd b7       	in	r28, 0x3d	; 61
 184:	de b7       	in	r29, 0x3e	; 62
 186:	9a 83       	std	Y+2, r25	; 0x02
 188:	89 83       	std	Y+1, r24	; 0x01
 18a:	6b 83       	std	Y+3, r22	; 0x03
	while (multiple > 0) {
 18c:	89 81       	ldd	r24, Y+1	; 0x01
 18e:	9a 81       	ldd	r25, Y+2	; 0x02
 190:	18 16       	cp	r1, r24
 192:	19 06       	cpc	r1, r25
 194:	6c f4       	brge	.+26     	; 0x1b0 <_Z12wait_stepperic+0x36>
		delay_T_msec_timer1(time_choice);
 196:	8b 81       	ldd	r24, Y+3	; 0x03
 198:	0e 94 5d 00 	call	0xba	; 0xba <_Z19delay_T_msec_timer1c>
		multiple--;
 19c:	89 81       	ldd	r24, Y+1	; 0x01
 19e:	9a 81       	ldd	r25, Y+2	; 0x02
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	9a 83       	std	Y+2, r25	; 0x02
 1a4:	89 83       	std	Y+1, r24	; 0x01
		multiple--;
	}
}

void wait_stepper(volatile int multiple, volatile char time_choice) {
	while (multiple > 0) {
 1a6:	89 81       	ldd	r24, Y+1	; 0x01
 1a8:	9a 81       	ldd	r25, Y+2	; 0x02
 1aa:	18 16       	cp	r1, r24
 1ac:	19 06       	cpc	r1, r25
 1ae:	9c f3       	brlt	.-26     	; 0x196 <_Z12wait_stepperic+0x1c>
		delay_T_msec_timer1(time_choice);
		multiple--;
	}
}
 1b0:	0f 90       	pop	r0
 1b2:	0f 90       	pop	r0
 1b4:	0f 90       	pop	r0
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	08 95       	ret

000001bc <__vector_2>:
	//TIFR1 = 0x1<<TOV1;  // Clear TOV1 (note that this is an odd bit in that it
	//is cleared by writing a 1 to it)

} // end delay_T_msec_timer1()

ISR(INT1_vect) {
 1bc:	1f 92       	push	r1
 1be:	0f 92       	push	r0
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	0f 92       	push	r0
 1c4:	11 24       	eor	r1, r1
 1c6:	2f 93       	push	r18
 1c8:	3f 93       	push	r19
 1ca:	4f 93       	push	r20
 1cc:	5f 93       	push	r21
 1ce:	6f 93       	push	r22
 1d0:	7f 93       	push	r23
 1d2:	8f 93       	push	r24
 1d4:	9f 93       	push	r25
 1d6:	af 93       	push	r26
 1d8:	bf 93       	push	r27
 1da:	ef 93       	push	r30
 1dc:	ff 93       	push	r31
	
	while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
 1de:	e0 ec       	ldi	r30, 0xC0	; 192
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	88 23       	and	r24, r24
 1e6:	ec f7       	brge	.-6      	; 0x1e2 <__vector_2+0x26>
	ButtonValue = UDR0; // Read the data
 1e8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <ButtonValue>
	
	if (counter <= 264) {
 1f0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1f4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 1f8:	89 30       	cpi	r24, 0x09	; 9
 1fa:	91 40       	sbci	r25, 0x01	; 1
 1fc:	3c f4       	brge	.+14     	; 0x20c <__vector_2+0x50>
		PORTD = PORTD & 0b01111111;
 1fe:	5f 98       	cbi	0x0b, 7	; 11
		wait(1000,2);
 200:	62 e0       	ldi	r22, 0x02	; 2
 202:	88 ee       	ldi	r24, 0xE8	; 232
 204:	93 e0       	ldi	r25, 0x03	; 3
 206:	0e 94 96 00 	call	0x12c	; 0x12c <_Z4waitic>
 20a:	14 c0       	rjmp	.+40     	; 0x234 <__vector_2+0x78>
	}
	else if (counter <= 528) {
 20c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 210:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 214:	81 31       	cpi	r24, 0x11	; 17
 216:	92 40       	sbci	r25, 0x02	; 2
 218:	3c f4       	brge	.+14     	; 0x228 <__vector_2+0x6c>
		PORTD = PORTD & 0b10111111;
 21a:	5e 98       	cbi	0x0b, 6	; 11
		wait(1000,2);
 21c:	62 e0       	ldi	r22, 0x02	; 2
 21e:	88 ee       	ldi	r24, 0xE8	; 232
 220:	93 e0       	ldi	r25, 0x03	; 3
 222:	0e 94 96 00 	call	0x12c	; 0x12c <_Z4waitic>
 226:	06 c0       	rjmp	.+12     	; 0x234 <__vector_2+0x78>
	}
	else {
		PORTD = PORTD & 0b11011111;
 228:	5d 98       	cbi	0x0b, 5	; 11
		wait(1000,2);
 22a:	62 e0       	ldi	r22, 0x02	; 2
 22c:	88 ee       	ldi	r24, 0xE8	; 232
 22e:	93 e0       	ldi	r25, 0x03	; 3
 230:	0e 94 96 00 	call	0x12c	; 0x12c <_Z4waitic>
	}
	PORTD = PORTD | 0b11110111;
 234:	8b b1       	in	r24, 0x0b	; 11
 236:	87 6f       	ori	r24, 0xF7	; 247
 238:	8b b9       	out	0x0b, r24	; 11
	
	// PERFORM ACTION DEPENDING ON WHAT VALUE WAS RECIEVED FROM THE WIRELESS TRANSMITTER
	if (ButtonValue <= 35){
 23a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <ButtonValue>
 23e:	84 32       	cpi	r24, 0x24	; 36
 240:	10 f4       	brcc	.+4      	; 0x246 <__vector_2+0x8a>
		PORTB = 0b11111101;
 242:	8d ef       	ldi	r24, 0xFD	; 253
 244:	85 b9       	out	0x05, r24	; 5
	}
	while (ButtonValue > 35 && ButtonValue <= 105) {
 246:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <ButtonValue>
 24a:	9c ed       	ldi	r25, 0xDC	; 220
 24c:	98 0f       	add	r25, r24
 24e:	96 34       	cpi	r25, 0x46	; 70
 250:	80 f4       	brcc	.+32     	; 0x272 <__vector_2+0xb6>
		PORTB = 0b11111011;
 252:	2b ef       	ldi	r18, 0xFB	; 251
		
		// READ THE VALUES FROM THE WIRELESS TRANSMITTER
		while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
 254:	e0 ec       	ldi	r30, 0xC0	; 192
 256:	f0 e0       	ldi	r31, 0x00	; 0
		ButtonValue = UDR0; // Read the data
 258:	a6 ec       	ldi	r26, 0xC6	; 198
 25a:	b0 e0       	ldi	r27, 0x00	; 0
	// PERFORM ACTION DEPENDING ON WHAT VALUE WAS RECIEVED FROM THE WIRELESS TRANSMITTER
	if (ButtonValue <= 35){
		PORTB = 0b11111101;
	}
	while (ButtonValue > 35 && ButtonValue <= 105) {
		PORTB = 0b11111011;
 25c:	25 b9       	out	0x05, r18	; 5
		
		// READ THE VALUES FROM THE WIRELESS TRANSMITTER
		while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
 25e:	80 81       	ld	r24, Z
 260:	88 23       	and	r24, r24
 262:	ec f7       	brge	.-6      	; 0x25e <__vector_2+0xa2>
		ButtonValue = UDR0; // Read the data
 264:	8c 91       	ld	r24, X
 266:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <ButtonValue>
	
	// PERFORM ACTION DEPENDING ON WHAT VALUE WAS RECIEVED FROM THE WIRELESS TRANSMITTER
	if (ButtonValue <= 35){
		PORTB = 0b11111101;
	}
	while (ButtonValue > 35 && ButtonValue <= 105) {
 26a:	9c ed       	ldi	r25, 0xDC	; 220
 26c:	98 0f       	add	r25, r24
 26e:	96 34       	cpi	r25, 0x46	; 70
 270:	a8 f3       	brcs	.-22     	; 0x25c <__vector_2+0xa0>
		
		// READ THE VALUES FROM THE WIRELESS TRANSMITTER
		while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
		ButtonValue = UDR0; // Read the data
	}
	if (ButtonValue > 105 && ButtonValue <= 175) {
 272:	8a 56       	subi	r24, 0x6A	; 106
 274:	86 34       	cpi	r24, 0x46	; 70
 276:	10 f4       	brcc	.+4      	; 0x27c <__vector_2+0xc0>
		PORTB = 0b11110111;
 278:	87 ef       	ldi	r24, 0xF7	; 247
 27a:	85 b9       	out	0x05, r24	; 5
	}
	while (ButtonValue >= 175) {
 27c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <ButtonValue>
 280:	8f 3a       	cpi	r24, 0xAF	; 175
 282:	70 f0       	brcs	.+28     	; 0x2a0 <__vector_2+0xe4>
		PORTB = 0b11101111;
 284:	9f ee       	ldi	r25, 0xEF	; 239
		
		while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
 286:	e0 ec       	ldi	r30, 0xC0	; 192
 288:	f0 e0       	ldi	r31, 0x00	; 0
		ButtonValue = UDR0; // Read the data
 28a:	a6 ec       	ldi	r26, 0xC6	; 198
 28c:	b0 e0       	ldi	r27, 0x00	; 0
	}
	if (ButtonValue > 105 && ButtonValue <= 175) {
		PORTB = 0b11110111;
	}
	while (ButtonValue >= 175) {
		PORTB = 0b11101111;
 28e:	95 b9       	out	0x05, r25	; 5
		
		while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
 290:	80 81       	ld	r24, Z
 292:	88 23       	and	r24, r24
 294:	ec f7       	brge	.-6      	; 0x290 <__vector_2+0xd4>
		ButtonValue = UDR0; // Read the data
 296:	8c 91       	ld	r24, X
 298:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <ButtonValue>
		ButtonValue = UDR0; // Read the data
	}
	if (ButtonValue > 105 && ButtonValue <= 175) {
		PORTB = 0b11110111;
	}
	while (ButtonValue >= 175) {
 29c:	8f 3a       	cpi	r24, 0xAF	; 175
 29e:	b8 f7       	brcc	.-18     	; 0x28e <__vector_2+0xd2>
	}
	
	
	//EIFR = EIFR | 1<<INTF1;

}
 2a0:	ff 91       	pop	r31
 2a2:	ef 91       	pop	r30
 2a4:	bf 91       	pop	r27
 2a6:	af 91       	pop	r26
 2a8:	9f 91       	pop	r25
 2aa:	8f 91       	pop	r24
 2ac:	7f 91       	pop	r23
 2ae:	6f 91       	pop	r22
 2b0:	5f 91       	pop	r21
 2b2:	4f 91       	pop	r20
 2b4:	3f 91       	pop	r19
 2b6:	2f 91       	pop	r18
 2b8:	0f 90       	pop	r0
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	0f 90       	pop	r0
 2be:	1f 90       	pop	r1
 2c0:	18 95       	reti

000002c2 <_Z9stepRighti>:

int stepRight(int counter_value){
 2c2:	0f 93       	push	r16
 2c4:	1f 93       	push	r17
 2c6:	cf 93       	push	r28
 2c8:	8c 01       	movw	r16, r24
	int counter_right = counter_value + 1;
	PORTC &= ~(1 << PORTC1); //changing direction to step right by clearing pc1
 2ca:	41 98       	cbi	0x08, 1	; 8
	wait_stepper(5,2);
 2cc:	62 e0       	ldi	r22, 0x02	; 2
 2ce:	85 e0       	ldi	r24, 0x05	; 5
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	0e 94 bd 00 	call	0x17a	; 0x17a <_Z12wait_stepperic>
	PORTC ^= 1 << PORTC3;
 2d6:	88 b1       	in	r24, 0x08	; 8
 2d8:	c8 e0       	ldi	r28, 0x08	; 8
 2da:	8c 27       	eor	r24, r28
 2dc:	88 b9       	out	0x08, r24	; 8
	wait_stepper(1,1);
 2de:	61 e0       	ldi	r22, 0x01	; 1
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	0e 94 bd 00 	call	0x17a	; 0x17a <_Z12wait_stepperic>
	PORTC ^= 1 << PORTC3;
 2e8:	88 b1       	in	r24, 0x08	; 8
 2ea:	c8 27       	eor	r28, r24
 2ec:	c8 b9       	out	0x08, r28	; 8
	wait_stepper(1,1);
 2ee:	61 e0       	ldi	r22, 0x01	; 1
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	0e 94 bd 00 	call	0x17a	; 0x17a <_Z12wait_stepperic>
	
	return counter_right;
}
 2f8:	c8 01       	movw	r24, r16
 2fa:	01 96       	adiw	r24, 0x01	; 1
 2fc:	cf 91       	pop	r28
 2fe:	1f 91       	pop	r17
 300:	0f 91       	pop	r16
 302:	08 95       	ret

00000304 <_Z8stepLefti>:

int stepLeft(int counter_value){
 304:	0f 93       	push	r16
 306:	1f 93       	push	r17
 308:	cf 93       	push	r28
 30a:	8c 01       	movw	r16, r24
	int counter_left = counter_value - 1;
	PORTC |= 1 << PORTC1; //changing directon pin to step left by setting pc1
 30c:	41 9a       	sbi	0x08, 1	; 8
	wait_stepper(5,2);
 30e:	62 e0       	ldi	r22, 0x02	; 2
 310:	85 e0       	ldi	r24, 0x05	; 5
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 bd 00 	call	0x17a	; 0x17a <_Z12wait_stepperic>
	PORTC ^= 1 << PORTC3;
 318:	88 b1       	in	r24, 0x08	; 8
 31a:	c8 e0       	ldi	r28, 0x08	; 8
 31c:	8c 27       	eor	r24, r28
 31e:	88 b9       	out	0x08, r24	; 8
	wait_stepper(1,1);
 320:	61 e0       	ldi	r22, 0x01	; 1
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 bd 00 	call	0x17a	; 0x17a <_Z12wait_stepperic>
	PORTC ^= 1 << PORTC3;
 32a:	88 b1       	in	r24, 0x08	; 8
 32c:	c8 27       	eor	r28, r24
 32e:	c8 b9       	out	0x08, r28	; 8
	wait_stepper(1,1);
 330:	61 e0       	ldi	r22, 0x01	; 1
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 bd 00 	call	0x17a	; 0x17a <_Z12wait_stepperic>
	
	return counter_left;
}
 33a:	c8 01       	movw	r24, r16
 33c:	01 97       	sbiw	r24, 0x01	; 1
 33e:	cf 91       	pop	r28
 340:	1f 91       	pop	r17
 342:	0f 91       	pop	r16
 344:	08 95       	ret

00000346 <main>:

int main(void)
{
    //PC3 - step , PC1 - dir 1 is cw 0 is ccw
	
	DDRB = 0b11111111;
 346:	8f ef       	ldi	r24, 0xFF	; 255
 348:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b11111111;
 34a:	87 b9       	out	0x07, r24	; 7
	DDRD = 0b11110111;
 34c:	97 ef       	ldi	r25, 0xF7	; 247
 34e:	9a b9       	out	0x0a, r25	; 10
	PORTB = 0b11111111; // PB1-4 will be the lights to test the buttons
 350:	85 b9       	out	0x05, r24	; 5
	PORTC = 0b00110100;
 352:	84 e3       	ldi	r24, 0x34	; 52
 354:	88 b9       	out	0x08, r24	; 8
	PORTD = 0b11110111;
 356:	9b b9       	out	0x0b, r25	; 11
	EICRA = 0b00001000;
 358:	88 e0       	ldi	r24, 0x08	; 8
 35a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = 1<<INT1;
 35e:	82 e0       	ldi	r24, 0x02	; 2
 360:	8d bb       	out	0x1d, r24	; 29
	sei();
 362:	78 94       	sei
	
	int local_counter = 0;
	initialize_usart(); // Initialize the USART with desired parameters
 364:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z16initialize_usartv>
	PORTD = 0b11110111;
	EICRA = 0b00001000;
	EIMSK = 1<<INT1;
	sei();
	
	int local_counter = 0;
 368:	20 e0       	ldi	r18, 0x00	; 0
 36a:	30 e0       	ldi	r19, 0x00	; 0
	initialize_usart(); // Initialize the USART with desired parameters
    while (1) 
    {
		while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
 36c:	c0 ec       	ldi	r28, 0xC0	; 192
 36e:	d0 e0       	ldi	r29, 0x00	; 0
		ButtonValue = UDR0; // Read the data
 370:	06 ec       	ldi	r16, 0xC6	; 198
 372:	10 e0       	ldi	r17, 0x00	; 0
				//ButtonValue = UDR0; // Read the data
				//ButtonValue = 20;
				
				// PERFORM ACTION DEPENDING ON WHAT VALUE WAS RECIEVED FROM THE WIRELESS TRANSMITTER
				if (ButtonValue <= 35){
					PORTB = 0b11111101;
 374:	0f 2e       	mov	r0, r31
 376:	fd ef       	ldi	r31, 0xFD	; 253
 378:	bf 2e       	mov	r11, r31
 37a:	f0 2d       	mov	r31, r0
				}
				while (ButtonValue > 35 && ButtonValue <= 105) {
					PORTB = 0b11111011;
 37c:	0f 2e       	mov	r0, r31
 37e:	fb ef       	ldi	r31, 0xFB	; 251
 380:	ef 2e       	mov	r14, r31
 382:	f0 2d       	mov	r31, r0
				}
				if (ButtonValue > 105 && ButtonValue <= 175) {
					PORTB = 0b11110111;
				}
				while (ButtonValue >= 175) {
					PORTB = 0b11101111;
 384:	0f 2e       	mov	r0, r31
 386:	ff ee       	ldi	r31, 0xEF	; 239
 388:	ff 2e       	mov	r15, r31
 38a:	f0 2d       	mov	r31, r0
	
	int local_counter = 0;
	initialize_usart(); // Initialize the USART with desired parameters
    while (1) 
    {
		while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
 38c:	88 81       	ld	r24, Y
 38e:	88 23       	and	r24, r24
 390:	ec f7       	brge	.-6      	; 0x38c <main+0x46>
		ButtonValue = UDR0; // Read the data
 392:	f8 01       	movw	r30, r16
 394:	80 81       	ld	r24, Z
 396:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <ButtonValue>
 39a:	0f 2e       	mov	r0, r31
 39c:	f0 e2       	ldi	r31, 0x20	; 32
 39e:	cf 2e       	mov	r12, r31
 3a0:	f3 e0       	ldi	r31, 0x03	; 3
 3a2:	df 2e       	mov	r13, r31
 3a4:	f0 2d       	mov	r31, r0
					// READ THE VALUES FROM THE WIRELESS TRANSMITTER
					while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
					ButtonValue = UDR0; // Read the data
				}
				if (ButtonValue > 105 && ButtonValue <= 175) {
					PORTB = 0b11110111;
 3a6:	0f 2e       	mov	r0, r31
 3a8:	f7 ef       	ldi	r31, 0xF7	; 247
 3aa:	af 2e       	mov	r10, r31
 3ac:	f0 2d       	mov	r31, r0
		while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
		ButtonValue = UDR0; // Read the data
			for (int i = 0; i < 800; i++)
			{
				// THIS IS TO GET THE STEPPER MOTOR TO PAN TO THE RIGHT
				local_counter = stepRight(local_counter);
 3ae:	c9 01       	movw	r24, r18
 3b0:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z9stepRighti>
 3b4:	9c 01       	movw	r18, r24
				counter = local_counter;
 3b6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 3ba:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
				//while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
				//ButtonValue = UDR0; // Read the data
				//ButtonValue = 20;
				
				// PERFORM ACTION DEPENDING ON WHAT VALUE WAS RECIEVED FROM THE WIRELESS TRANSMITTER
				if (ButtonValue <= 35){
 3be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <ButtonValue>
 3c2:	84 32       	cpi	r24, 0x24	; 36
 3c4:	08 f4       	brcc	.+2      	; 0x3c8 <main+0x82>
					PORTB = 0b11111101;
 3c6:	b5 b8       	out	0x05, r11	; 5
				}
				while (ButtonValue > 35 && ButtonValue <= 105) {
 3c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <ButtonValue>
 3cc:	9c ed       	ldi	r25, 0xDC	; 220
 3ce:	98 0f       	add	r25, r24
 3d0:	96 34       	cpi	r25, 0x46	; 70
 3d2:	60 f4       	brcc	.+24     	; 0x3ec <main+0xa6>
					PORTB = 0b11111011;
 3d4:	e5 b8       	out	0x05, r14	; 5
					
					// READ THE VALUES FROM THE WIRELESS TRANSMITTER
					while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
 3d6:	98 81       	ld	r25, Y
 3d8:	99 23       	and	r25, r25
 3da:	ec f7       	brge	.-6      	; 0x3d6 <main+0x90>
					ButtonValue = UDR0; // Read the data
 3dc:	f8 01       	movw	r30, r16
 3de:	80 81       	ld	r24, Z
 3e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <ButtonValue>
				
				// PERFORM ACTION DEPENDING ON WHAT VALUE WAS RECIEVED FROM THE WIRELESS TRANSMITTER
				if (ButtonValue <= 35){
					PORTB = 0b11111101;
				}
				while (ButtonValue > 35 && ButtonValue <= 105) {
 3e4:	9c ed       	ldi	r25, 0xDC	; 220
 3e6:	98 0f       	add	r25, r24
 3e8:	96 34       	cpi	r25, 0x46	; 70
 3ea:	a0 f3       	brcs	.-24     	; 0x3d4 <main+0x8e>
					
					// READ THE VALUES FROM THE WIRELESS TRANSMITTER
					while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
					ButtonValue = UDR0; // Read the data
				}
				if (ButtonValue > 105 && ButtonValue <= 175) {
 3ec:	8a 56       	subi	r24, 0x6A	; 106
 3ee:	86 34       	cpi	r24, 0x46	; 70
 3f0:	08 f4       	brcc	.+2      	; 0x3f4 <main+0xae>
					PORTB = 0b11110111;
 3f2:	a5 b8       	out	0x05, r10	; 5
				}
				while (ButtonValue >= 175) {
 3f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <ButtonValue>
 3f8:	8f 3a       	cpi	r24, 0xAF	; 175
 3fa:	50 f0       	brcs	.+20     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
					PORTB = 0b11101111;
 3fc:	f5 b8       	out	0x05, r15	; 5
					
					while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
 3fe:	98 81       	ld	r25, Y
 400:	99 23       	and	r25, r25
 402:	ec f7       	brge	.-6      	; 0x3fe <main+0xb8>
					ButtonValue = UDR0; // Read the data
 404:	f8 01       	movw	r30, r16
 406:	80 81       	ld	r24, Z
 408:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <ButtonValue>
					ButtonValue = UDR0; // Read the data
				}
				if (ButtonValue > 105 && ButtonValue <= 175) {
					PORTB = 0b11110111;
				}
				while (ButtonValue >= 175) {
 40c:	8f 3a       	cpi	r24, 0xAF	; 175
 40e:	b0 f7       	brcc	.-20     	; 0x3fc <main+0xb6>
 410:	f1 e0       	ldi	r31, 0x01	; 1
 412:	cf 1a       	sub	r12, r31
 414:	d1 08       	sbc	r13, r1
	initialize_usart(); // Initialize the USART with desired parameters
    while (1) 
    {
		while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
		ButtonValue = UDR0; // Read the data
			for (int i = 0; i < 800; i++)
 416:	59 f6       	brne	.-106    	; 0x3ae <main+0x68>
 418:	0f 2e       	mov	r0, r31
 41a:	f0 e2       	ldi	r31, 0x20	; 32
 41c:	cf 2e       	mov	r12, r31
 41e:	f3 e0       	ldi	r31, 0x03	; 3
 420:	df 2e       	mov	r13, r31
 422:	f0 2d       	mov	r31, r0
					// READ THE VALUES FROM THE WIRELESS TRANSMITTER
					while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
					ButtonValue = UDR0; // Read the data
				}
				if (ButtonValue > 105 && ButtonValue <= 175) {
					PORTB = 0b11110111;
 424:	0f 2e       	mov	r0, r31
 426:	f7 ef       	ldi	r31, 0xF7	; 247
 428:	af 2e       	mov	r10, r31
 42a:	f0 2d       	mov	r31, r0
				
			}

			for (int i = 0; i < 800; i++){
				// THIS IS TO GET THE STEPPER MOTOR TO PAN TO THE LEFT
				local_counter = stepLeft(local_counter);
 42c:	c9 01       	movw	r24, r18
 42e:	0e 94 82 01 	call	0x304	; 0x304 <_Z8stepLefti>
 432:	9c 01       	movw	r18, r24
				counter = local_counter;
 434:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 438:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
				
				// READ THE VALUES FROM THE WIRELESS TRANSMITTER
				//while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
				ButtonValue = UDR0; // Read the data
 43c:	f8 01       	movw	r30, r16
 43e:	80 81       	ld	r24, Z
 440:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <ButtonValue>
				
				// PERFORM ACTION DEPENDING ON WHAT VALUE WAS RECIEVED FROM THE WIRELESS TRANSMITTER
				if (ButtonValue <= 35){
 444:	84 32       	cpi	r24, 0x24	; 36
 446:	08 f4       	brcc	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
					PORTB = 0b11111101;
 448:	b5 b8       	out	0x05, r11	; 5
				}
				while (ButtonValue > 35 && ButtonValue <= 105) {
 44a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <ButtonValue>
 44e:	8c ed       	ldi	r24, 0xDC	; 220
 450:	89 0f       	add	r24, r25
 452:	86 34       	cpi	r24, 0x46	; 70
 454:	60 f4       	brcc	.+24     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
					PORTB = 0b11111011;
 456:	e5 b8       	out	0x05, r14	; 5
					
					// READ THE VALUES FROM THE WIRELESS TRANSMITTER
					while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
 458:	98 81       	ld	r25, Y
 45a:	99 23       	and	r25, r25
 45c:	ec f7       	brge	.-6      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
					ButtonValue = UDR0; // Read the data
 45e:	f8 01       	movw	r30, r16
 460:	90 81       	ld	r25, Z
 462:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <ButtonValue>
				
				// PERFORM ACTION DEPENDING ON WHAT VALUE WAS RECIEVED FROM THE WIRELESS TRANSMITTER
				if (ButtonValue <= 35){
					PORTB = 0b11111101;
				}
				while (ButtonValue > 35 && ButtonValue <= 105) {
 466:	8c ed       	ldi	r24, 0xDC	; 220
 468:	89 0f       	add	r24, r25
 46a:	86 34       	cpi	r24, 0x46	; 70
 46c:	a0 f3       	brcs	.-24     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
					
					// READ THE VALUES FROM THE WIRELESS TRANSMITTER
					while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
					ButtonValue = UDR0; // Read the data
				}
				if (ButtonValue > 105 && ButtonValue <= 175) {
 46e:	9a 56       	subi	r25, 0x6A	; 106
 470:	96 34       	cpi	r25, 0x46	; 70
 472:	08 f4       	brcc	.+2      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
					PORTB = 0b11110111;
 474:	a5 b8       	out	0x05, r10	; 5
				}
				while (ButtonValue >= 175) {
 476:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <ButtonValue>
 47a:	8f 3a       	cpi	r24, 0xAF	; 175
 47c:	50 f0       	brcs	.+20     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
					PORTB = 0b11101111;
 47e:	f5 b8       	out	0x05, r15	; 5
					
					while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
 480:	98 81       	ld	r25, Y
 482:	99 23       	and	r25, r25
 484:	ec f7       	brge	.-6      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
					ButtonValue = UDR0; // Read the data
 486:	f8 01       	movw	r30, r16
 488:	80 81       	ld	r24, Z
 48a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <ButtonValue>
					ButtonValue = UDR0; // Read the data
				}
				if (ButtonValue > 105 && ButtonValue <= 175) {
					PORTB = 0b11110111;
				}
				while (ButtonValue >= 175) {
 48e:	8f 3a       	cpi	r24, 0xAF	; 175
 490:	b0 f7       	brcc	.-20     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 492:	f1 e0       	ldi	r31, 0x01	; 1
 494:	cf 1a       	sub	r12, r31
 496:	d1 08       	sbc	r13, r1
				}
				
				
			}

			for (int i = 0; i < 800; i++){
 498:	49 f6       	brne	.-110    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 49a:	78 cf       	rjmp	.-272    	; 0x38c <main+0x46>

0000049c <_exit>:
 49c:	f8 94       	cli

0000049e <__stop_program>:
 49e:	ff cf       	rjmp	.-2      	; 0x49e <__stop_program>
