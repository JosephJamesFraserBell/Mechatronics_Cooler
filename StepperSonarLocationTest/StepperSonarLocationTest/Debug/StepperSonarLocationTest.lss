
StepperSonarLocationTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000003da  0000046e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  00000470  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000092a  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006dc  00000000  00000000  00000e5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000446  00000000  00000000  00001536  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000010c  00000000  00000000  0000197c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000485  00000000  00000000  00001a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003da  00000000  00000000  00001f0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000022e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ed       	ldi	r30, 0xDA	; 218
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 40 01 	call	0x280	; 0x280 <main>
  9e:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z16initialize_usartv>:
}

// Function to recieve the data
void initialize_usart(void) // function to set up USART
{
	UCSR0B = (1<<RXEN0); // enable serial transmission
  a6:	80 e1       	ldi	r24, 0x10	; 16
  a8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); // Asynchronous mode, 8-bit data; no parity; 1 stop bit
  ac:	86 e0       	ldi	r24, 0x06	; 6
  ae:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = 0x67; // 9,600 baud if Fosc = 16MHz
  b2:	87 e6       	ldi	r24, 0x67	; 103
  b4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  b8:	08 95       	ret

000000ba <_Z19delay_T_msec_timer1c>:
		//if (ButtonValue > 32)
			//multiple = 0;
		multiple--;
	}
}
void delay_T_msec_timer1(volatile char choice) {
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	1f 92       	push	r1
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
  c4:	89 83       	std	Y+1, r24	; 0x01
	//Default: T = .0156 msec for no prescaler and count of 250 (preload counter with 65,535-5)

	//Inputs: None
	//Outputs: None

	TCCR1A = 0x00; // clears WGM00 and WGM01 (bits 0 and 1) to ensure Timer/Counter is in normal mode.
  c6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCNT1 = 0;  // preload load TIMER1 with 5 if counting to 255 (count must reach 65,535-5 = 250)
  ca:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  ce:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	// or preload with 0 and count to 250

	switch ( choice ) { // choose prescaler
  d2:	89 81       	ldd	r24, Y+1	; 0x01
  d4:	82 30       	cpi	r24, 0x02	; 2
  d6:	69 f0       	breq	.+26     	; 0xf2 <_Z19delay_T_msec_timer1c+0x38>
  d8:	18 f4       	brcc	.+6      	; 0xe0 <_Z19delay_T_msec_timer1c+0x26>
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	31 f0       	breq	.+12     	; 0xea <_Z19delay_T_msec_timer1c+0x30>
  de:	17 c0       	rjmp	.+46     	; 0x10e <_Z19delay_T_msec_timer1c+0x54>
  e0:	83 30       	cpi	r24, 0x03	; 3
  e2:	59 f0       	breq	.+22     	; 0xfa <_Z19delay_T_msec_timer1c+0x40>
  e4:	84 30       	cpi	r24, 0x04	; 4
  e6:	79 f0       	breq	.+30     	; 0x106 <_Z19delay_T_msec_timer1c+0x4c>
  e8:	12 c0       	rjmp	.+36     	; 0x10e <_Z19delay_T_msec_timer1c+0x54>
		case 1:
		TCCR1B = 1<<CS11;//TCCR1B = 0x02; // Start TIMER1, Normal mode, crystal clock, prescaler = 8
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		break;
  f0:	07 c0       	rjmp	.+14     	; 0x100 <_Z19delay_T_msec_timer1c+0x46>
		case 2:
		TCCR1B =  1<<CS11 | 1<<CS10;//TCCR1B = 0x03;  // Start TIMER1, Normal mode, crystal clock, prescaler = 64
  f2:	83 e0       	ldi	r24, 0x03	; 3
  f4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		break;
  f8:	03 c0       	rjmp	.+6      	; 0x100 <_Z19delay_T_msec_timer1c+0x46>
		case 3:
		TCCR1B = 1<<CS12;//TCCR1B = 0x04; // Start TIMER1, Normal mode, crystal clock, prescaler = 256
  fa:	84 e0       	ldi	r24, 0x04	; 4
  fc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		break;
	}

	//while ((TIFR1 & (0x1<<TOV1)) == 0); // wait for TOV1 to roll over at 255 (requires preload of 65,535-5 to make count = 250)
	// How does this while loop work?? See notes
	while (TCNT1 < 0xfa); // exits when count = 250 (requires preload of 0 to make count = 250)
 100:	e4 e8       	ldi	r30, 0x84	; 132
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	08 c0       	rjmp	.+16     	; 0x116 <_Z19delay_T_msec_timer1c+0x5c>
		break;
		case 3:
		TCCR1B = 1<<CS12;//TCCR1B = 0x04; // Start TIMER1, Normal mode, crystal clock, prescaler = 256
		break;
		case 4:
		TCCR1B = 1<<CS12 | 1<<CS10;//TCCR1B = 0x05; // Start TIMER1, Normal mode, crystal clock, prescaler = 1024
 106:	85 e0       	ldi	r24, 0x05	; 5
 108:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		break;
 10c:	f9 cf       	rjmp	.-14     	; 0x100 <_Z19delay_T_msec_timer1c+0x46>
		default:
		TCCR1A = 1<<CS10;//TCCR1B = 0x01; Start TIMER1, Normal mode, crystal clock, no prescaler
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
		break;
 114:	f5 cf       	rjmp	.-22     	; 0x100 <_Z19delay_T_msec_timer1c+0x46>
	}

	//while ((TIFR1 & (0x1<<TOV1)) == 0); // wait for TOV1 to roll over at 255 (requires preload of 65,535-5 to make count = 250)
	// How does this while loop work?? See notes
	while (TCNT1 < 0xfa); // exits when count = 250 (requires preload of 0 to make count = 250)
 116:	80 81       	ld	r24, Z
 118:	91 81       	ldd	r25, Z+1	; 0x01
 11a:	8a 3f       	cpi	r24, 0xFA	; 250
 11c:	91 05       	cpc	r25, r1
 11e:	d8 f3       	brcs	.-10     	; 0x116 <_Z19delay_T_msec_timer1c+0x5c>

	TCCR1B = 0x00; // Stop TIMER1
 120:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	//TIFR1 = 0x1<<TOV1;  // Clear TOV1 (note that this is an odd bit in that it
	//is cleared by writing a 1 to it)

} // end delay_T_msec_timer1()
 124:	0f 90       	pop	r0
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	08 95       	ret

0000012c <_Z4waitic>:
	UCSR0B = (1<<RXEN0); // enable serial transmission
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); // Asynchronous mode, 8-bit data; no parity; 1 stop bit
	UBRR0L = 0x67; // 9,600 baud if Fosc = 16MHz
}

void wait(volatile int multiple, volatile char time_choice) {
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	00 d0       	rcall	.+0      	; 0x132 <_Z4waitic+0x6>
 132:	1f 92       	push	r1
 134:	cd b7       	in	r28, 0x3d	; 61
 136:	de b7       	in	r29, 0x3e	; 62
 138:	9a 83       	std	Y+2, r25	; 0x02
 13a:	89 83       	std	Y+1, r24	; 0x01
 13c:	6b 83       	std	Y+3, r22	; 0x03
	while (multiple > 0) {
 13e:	89 81       	ldd	r24, Y+1	; 0x01
 140:	9a 81       	ldd	r25, Y+2	; 0x02
 142:	18 16       	cp	r1, r24
 144:	19 06       	cpc	r1, r25
 146:	6c f4       	brge	.+26     	; 0x162 <_Z4waitic+0x36>
		delay_T_msec_timer1(time_choice);
 148:	8b 81       	ldd	r24, Y+3	; 0x03
 14a:	0e 94 5d 00 	call	0xba	; 0xba <_Z19delay_T_msec_timer1c>
		//if (ButtonValue > 32)
			//multiple = 0;
		multiple--;
 14e:	89 81       	ldd	r24, Y+1	; 0x01
 150:	9a 81       	ldd	r25, Y+2	; 0x02
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	9a 83       	std	Y+2, r25	; 0x02
 156:	89 83       	std	Y+1, r24	; 0x01
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); // Asynchronous mode, 8-bit data; no parity; 1 stop bit
	UBRR0L = 0x67; // 9,600 baud if Fosc = 16MHz
}

void wait(volatile int multiple, volatile char time_choice) {
	while (multiple > 0) {
 158:	89 81       	ldd	r24, Y+1	; 0x01
 15a:	9a 81       	ldd	r25, Y+2	; 0x02
 15c:	18 16       	cp	r1, r24
 15e:	19 06       	cpc	r1, r25
 160:	9c f3       	brlt	.-26     	; 0x148 <_Z4waitic+0x1c>
		delay_T_msec_timer1(time_choice);
		//if (ButtonValue > 32)
			//multiple = 0;
		multiple--;
	}
}
 162:	0f 90       	pop	r0
 164:	0f 90       	pop	r0
 166:	0f 90       	pop	r0
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	08 95       	ret

0000016e <__vector_2>:
	//TIFR1 = 0x1<<TOV1;  // Clear TOV1 (note that this is an odd bit in that it
	//is cleared by writing a 1 to it)

} // end delay_T_msec_timer1()

ISR(INT1_vect) {
 16e:	1f 92       	push	r1
 170:	0f 92       	push	r0
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	0f 92       	push	r0
 176:	11 24       	eor	r1, r1
 178:	2f 93       	push	r18
 17a:	3f 93       	push	r19
 17c:	4f 93       	push	r20
 17e:	5f 93       	push	r21
 180:	6f 93       	push	r22
 182:	7f 93       	push	r23
 184:	8f 93       	push	r24
 186:	9f 93       	push	r25
 188:	af 93       	push	r26
 18a:	bf 93       	push	r27
 18c:	ef 93       	push	r30
 18e:	ff 93       	push	r31
	if (counter <= 264) {
 190:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 194:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 198:	89 30       	cpi	r24, 0x09	; 9
 19a:	91 40       	sbci	r25, 0x01	; 1
 19c:	3c f4       	brge	.+14     	; 0x1ac <__vector_2+0x3e>
		PORTD = PORTD & 0b01111111;
 19e:	5f 98       	cbi	0x0b, 7	; 11
		wait(1000,2);
 1a0:	62 e0       	ldi	r22, 0x02	; 2
 1a2:	88 ee       	ldi	r24, 0xE8	; 232
 1a4:	93 e0       	ldi	r25, 0x03	; 3
 1a6:	0e 94 96 00 	call	0x12c	; 0x12c <_Z4waitic>
 1aa:	14 c0       	rjmp	.+40     	; 0x1d4 <__vector_2+0x66>
	}
	else if (counter <= 528) {
 1ac:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1b0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 1b4:	81 31       	cpi	r24, 0x11	; 17
 1b6:	92 40       	sbci	r25, 0x02	; 2
 1b8:	3c f4       	brge	.+14     	; 0x1c8 <__vector_2+0x5a>
		PORTD = PORTD & 0b10111111;
 1ba:	5e 98       	cbi	0x0b, 6	; 11
		wait(1000,2);
 1bc:	62 e0       	ldi	r22, 0x02	; 2
 1be:	88 ee       	ldi	r24, 0xE8	; 232
 1c0:	93 e0       	ldi	r25, 0x03	; 3
 1c2:	0e 94 96 00 	call	0x12c	; 0x12c <_Z4waitic>
 1c6:	06 c0       	rjmp	.+12     	; 0x1d4 <__vector_2+0x66>
	}
	else {
		PORTD = PORTD & 0b11011111;
 1c8:	5d 98       	cbi	0x0b, 5	; 11
		wait(1000,2);
 1ca:	62 e0       	ldi	r22, 0x02	; 2
 1cc:	88 ee       	ldi	r24, 0xE8	; 232
 1ce:	93 e0       	ldi	r25, 0x03	; 3
 1d0:	0e 94 96 00 	call	0x12c	; 0x12c <_Z4waitic>
	}
	PORTD = PORTD | 0b11110111;
 1d4:	8b b1       	in	r24, 0x0b	; 11
 1d6:	87 6f       	ori	r24, 0xF7	; 247
 1d8:	8b b9       	out	0x0b, r24	; 11
	//EIFR = EIFR | 1<<INTF1;

}
 1da:	ff 91       	pop	r31
 1dc:	ef 91       	pop	r30
 1de:	bf 91       	pop	r27
 1e0:	af 91       	pop	r26
 1e2:	9f 91       	pop	r25
 1e4:	8f 91       	pop	r24
 1e6:	7f 91       	pop	r23
 1e8:	6f 91       	pop	r22
 1ea:	5f 91       	pop	r21
 1ec:	4f 91       	pop	r20
 1ee:	3f 91       	pop	r19
 1f0:	2f 91       	pop	r18
 1f2:	0f 90       	pop	r0
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	0f 90       	pop	r0
 1f8:	1f 90       	pop	r1
 1fa:	18 95       	reti

000001fc <_Z9stepRighti>:

int stepRight(int counter_value){
 1fc:	0f 93       	push	r16
 1fe:	1f 93       	push	r17
 200:	cf 93       	push	r28
 202:	8c 01       	movw	r16, r24
	int counter_right = counter_value + 1;
	PORTC &= ~(1 << PORTC1); //changing direction to step right by clearing pc1
 204:	41 98       	cbi	0x08, 1	; 8
	wait(5,2);
 206:	62 e0       	ldi	r22, 0x02	; 2
 208:	85 e0       	ldi	r24, 0x05	; 5
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 96 00 	call	0x12c	; 0x12c <_Z4waitic>
	PORTC ^= 1 << PORTC3;
 210:	88 b1       	in	r24, 0x08	; 8
 212:	c8 e0       	ldi	r28, 0x08	; 8
 214:	8c 27       	eor	r24, r28
 216:	88 b9       	out	0x08, r24	; 8
	wait(1,1);
 218:	61 e0       	ldi	r22, 0x01	; 1
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 96 00 	call	0x12c	; 0x12c <_Z4waitic>
	PORTC ^= 1 << PORTC3;
 222:	88 b1       	in	r24, 0x08	; 8
 224:	c8 27       	eor	r28, r24
 226:	c8 b9       	out	0x08, r28	; 8
	wait(1,1);
 228:	61 e0       	ldi	r22, 0x01	; 1
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 96 00 	call	0x12c	; 0x12c <_Z4waitic>
	
	return counter_right;
}
 232:	c8 01       	movw	r24, r16
 234:	01 96       	adiw	r24, 0x01	; 1
 236:	cf 91       	pop	r28
 238:	1f 91       	pop	r17
 23a:	0f 91       	pop	r16
 23c:	08 95       	ret

0000023e <_Z8stepLefti>:

int stepLeft(int counter_value){
 23e:	0f 93       	push	r16
 240:	1f 93       	push	r17
 242:	cf 93       	push	r28
 244:	8c 01       	movw	r16, r24
	int counter_left = counter_value - 1;
	PORTC |= 1 << PORTC1; //changing directon pin to step left by setting pc1
 246:	41 9a       	sbi	0x08, 1	; 8
	wait(5,2);
 248:	62 e0       	ldi	r22, 0x02	; 2
 24a:	85 e0       	ldi	r24, 0x05	; 5
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 96 00 	call	0x12c	; 0x12c <_Z4waitic>
	PORTC ^= 1 << PORTC3;
 252:	88 b1       	in	r24, 0x08	; 8
 254:	c8 e0       	ldi	r28, 0x08	; 8
 256:	8c 27       	eor	r24, r28
 258:	88 b9       	out	0x08, r24	; 8
	wait(1,1);
 25a:	61 e0       	ldi	r22, 0x01	; 1
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 96 00 	call	0x12c	; 0x12c <_Z4waitic>
	PORTC ^= 1 << PORTC3;
 264:	88 b1       	in	r24, 0x08	; 8
 266:	c8 27       	eor	r28, r24
 268:	c8 b9       	out	0x08, r28	; 8
	wait(1,1);
 26a:	61 e0       	ldi	r22, 0x01	; 1
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 96 00 	call	0x12c	; 0x12c <_Z4waitic>
	
	return counter_left;
}
 274:	c8 01       	movw	r24, r16
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	cf 91       	pop	r28
 27a:	1f 91       	pop	r17
 27c:	0f 91       	pop	r16
 27e:	08 95       	ret

00000280 <main>:

int main(void)
{
    //PC3 - step , PC1 - dir 1 is cw 0 is ccw
	
	DDRB = 0b11111111;
 280:	8f ef       	ldi	r24, 0xFF	; 255
 282:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b11111111;
 284:	87 b9       	out	0x07, r24	; 7
	DDRD = 0b11110111;
 286:	97 ef       	ldi	r25, 0xF7	; 247
 288:	9a b9       	out	0x0a, r25	; 10
	PORTB = 0b11111111; // PB1-4 will be the lights to test the buttons
 28a:	85 b9       	out	0x05, r24	; 5
	PORTC = 0b00110100;
 28c:	84 e3       	ldi	r24, 0x34	; 52
 28e:	88 b9       	out	0x08, r24	; 8
	PORTD = 0b11110111;
 290:	9b b9       	out	0x0b, r25	; 11
	EICRA = 0b00001000;
 292:	88 e0       	ldi	r24, 0x08	; 8
 294:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = 1<<INT1;
 298:	82 e0       	ldi	r24, 0x02	; 2
 29a:	8d bb       	out	0x1d, r24	; 29
	sei();
 29c:	78 94       	sei
	
	int local_counter = 0;
	initialize_usart(); // Initialize the USART with desired parameters
 29e:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z16initialize_usartv>
	PORTD = 0b11110111;
	EICRA = 0b00001000;
	EIMSK = 1<<INT1;
	sei();
	
	int local_counter = 0;
 2a2:	20 e0       	ldi	r18, 0x00	; 0
 2a4:	30 e0       	ldi	r19, 0x00	; 0
	initialize_usart(); // Initialize the USART with desired parameters
    while (1) 
    {
		while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
 2a6:	c0 ec       	ldi	r28, 0xC0	; 192
 2a8:	d0 e0       	ldi	r29, 0x00	; 0
		ButtonValue = UDR0; // Read the data
 2aa:	06 ec       	ldi	r16, 0xC6	; 198
 2ac:	10 e0       	ldi	r17, 0x00	; 0
				//ButtonValue = UDR0; // Read the data
				//ButtonValue = 20;
				
				// PERFORM ACTION DEPENDING ON WHAT VALUE WAS RECIEVED FROM THE WIRELESS TRANSMITTER
				if (ButtonValue <= 35){
					PORTB = 0b11111101;
 2ae:	0f 2e       	mov	r0, r31
 2b0:	fd ef       	ldi	r31, 0xFD	; 253
 2b2:	bf 2e       	mov	r11, r31
 2b4:	f0 2d       	mov	r31, r0
				}
				while (ButtonValue > 35 && ButtonValue <= 105) {
					PORTB = 0b11111011;
 2b6:	0f 2e       	mov	r0, r31
 2b8:	fb ef       	ldi	r31, 0xFB	; 251
 2ba:	ef 2e       	mov	r14, r31
 2bc:	f0 2d       	mov	r31, r0
				}
				if (ButtonValue > 105 && ButtonValue <= 175) {
					PORTB = 0b11110111;
				}
				while (ButtonValue >= 175) {
					PORTB = 0b11101111;
 2be:	0f 2e       	mov	r0, r31
 2c0:	ff ee       	ldi	r31, 0xEF	; 239
 2c2:	ff 2e       	mov	r15, r31
 2c4:	f0 2d       	mov	r31, r0
	
	int local_counter = 0;
	initialize_usart(); // Initialize the USART with desired parameters
    while (1) 
    {
		while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
 2c6:	88 81       	ld	r24, Y
 2c8:	88 23       	and	r24, r24
 2ca:	ec f7       	brge	.-6      	; 0x2c6 <main+0x46>
		ButtonValue = UDR0; // Read the data
 2cc:	f8 01       	movw	r30, r16
 2ce:	80 81       	ld	r24, Z
 2d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <ButtonValue>
 2d4:	0f 2e       	mov	r0, r31
 2d6:	f0 e2       	ldi	r31, 0x20	; 32
 2d8:	cf 2e       	mov	r12, r31
 2da:	f3 e0       	ldi	r31, 0x03	; 3
 2dc:	df 2e       	mov	r13, r31
 2de:	f0 2d       	mov	r31, r0
					// READ THE VALUES FROM THE WIRELESS TRANSMITTER
					while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
					ButtonValue = UDR0; // Read the data
				}
				if (ButtonValue > 105 && ButtonValue <= 175) {
					PORTB = 0b11110111;
 2e0:	0f 2e       	mov	r0, r31
 2e2:	f7 ef       	ldi	r31, 0xF7	; 247
 2e4:	af 2e       	mov	r10, r31
 2e6:	f0 2d       	mov	r31, r0
		while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
		ButtonValue = UDR0; // Read the data
			for (int i = 0; i < 800; i++)
			{
				// THIS IS TO GET THE STEPPER MOTOR TO PAN TO THE RIGHT
				local_counter = stepRight(local_counter);
 2e8:	c9 01       	movw	r24, r18
 2ea:	0e 94 fe 00 	call	0x1fc	; 0x1fc <_Z9stepRighti>
 2ee:	9c 01       	movw	r18, r24
				counter = local_counter;
 2f0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 2f4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
				//while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
				//ButtonValue = UDR0; // Read the data
				//ButtonValue = 20;
				
				// PERFORM ACTION DEPENDING ON WHAT VALUE WAS RECIEVED FROM THE WIRELESS TRANSMITTER
				if (ButtonValue <= 35){
 2f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <ButtonValue>
 2fc:	84 32       	cpi	r24, 0x24	; 36
 2fe:	08 f4       	brcc	.+2      	; 0x302 <main+0x82>
					PORTB = 0b11111101;
 300:	b5 b8       	out	0x05, r11	; 5
				}
				while (ButtonValue > 35 && ButtonValue <= 105) {
 302:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <ButtonValue>
 306:	9c ed       	ldi	r25, 0xDC	; 220
 308:	98 0f       	add	r25, r24
 30a:	96 34       	cpi	r25, 0x46	; 70
 30c:	60 f4       	brcc	.+24     	; 0x326 <main+0xa6>
					PORTB = 0b11111011;
 30e:	e5 b8       	out	0x05, r14	; 5
					
					// READ THE VALUES FROM THE WIRELESS TRANSMITTER
					while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
 310:	98 81       	ld	r25, Y
 312:	99 23       	and	r25, r25
 314:	ec f7       	brge	.-6      	; 0x310 <main+0x90>
					ButtonValue = UDR0; // Read the data
 316:	f8 01       	movw	r30, r16
 318:	80 81       	ld	r24, Z
 31a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <ButtonValue>
				
				// PERFORM ACTION DEPENDING ON WHAT VALUE WAS RECIEVED FROM THE WIRELESS TRANSMITTER
				if (ButtonValue <= 35){
					PORTB = 0b11111101;
				}
				while (ButtonValue > 35 && ButtonValue <= 105) {
 31e:	9c ed       	ldi	r25, 0xDC	; 220
 320:	98 0f       	add	r25, r24
 322:	96 34       	cpi	r25, 0x46	; 70
 324:	a0 f3       	brcs	.-24     	; 0x30e <main+0x8e>
					
					// READ THE VALUES FROM THE WIRELESS TRANSMITTER
					while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
					ButtonValue = UDR0; // Read the data
				}
				if (ButtonValue > 105 && ButtonValue <= 175) {
 326:	8a 56       	subi	r24, 0x6A	; 106
 328:	86 34       	cpi	r24, 0x46	; 70
 32a:	08 f4       	brcc	.+2      	; 0x32e <main+0xae>
					PORTB = 0b11110111;
 32c:	a5 b8       	out	0x05, r10	; 5
				}
				while (ButtonValue >= 175) {
 32e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <ButtonValue>
 332:	8f 3a       	cpi	r24, 0xAF	; 175
 334:	50 f0       	brcs	.+20     	; 0x34a <main+0xca>
					PORTB = 0b11101111;
 336:	f5 b8       	out	0x05, r15	; 5
					
					while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
 338:	98 81       	ld	r25, Y
 33a:	99 23       	and	r25, r25
 33c:	ec f7       	brge	.-6      	; 0x338 <main+0xb8>
					ButtonValue = UDR0; // Read the data
 33e:	f8 01       	movw	r30, r16
 340:	80 81       	ld	r24, Z
 342:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <ButtonValue>
					ButtonValue = UDR0; // Read the data
				}
				if (ButtonValue > 105 && ButtonValue <= 175) {
					PORTB = 0b11110111;
				}
				while (ButtonValue >= 175) {
 346:	8f 3a       	cpi	r24, 0xAF	; 175
 348:	b0 f7       	brcc	.-20     	; 0x336 <main+0xb6>
 34a:	f1 e0       	ldi	r31, 0x01	; 1
 34c:	cf 1a       	sub	r12, r31
 34e:	d1 08       	sbc	r13, r1
	initialize_usart(); // Initialize the USART with desired parameters
    while (1) 
    {
		while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
		ButtonValue = UDR0; // Read the data
			for (int i = 0; i < 800; i++)
 350:	59 f6       	brne	.-106    	; 0x2e8 <main+0x68>
 352:	0f 2e       	mov	r0, r31
 354:	f0 e2       	ldi	r31, 0x20	; 32
 356:	cf 2e       	mov	r12, r31
 358:	f3 e0       	ldi	r31, 0x03	; 3
 35a:	df 2e       	mov	r13, r31
 35c:	f0 2d       	mov	r31, r0
					// READ THE VALUES FROM THE WIRELESS TRANSMITTER
					while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
					ButtonValue = UDR0; // Read the data
				}
				if (ButtonValue > 105 && ButtonValue <= 175) {
					PORTB = 0b11110111;
 35e:	0f 2e       	mov	r0, r31
 360:	f7 ef       	ldi	r31, 0xF7	; 247
 362:	af 2e       	mov	r10, r31
 364:	f0 2d       	mov	r31, r0
				
			}

			for (int i = 0; i < 800; i++){
				// THIS IS TO GET THE STEPPER MOTOR TO PAN TO THE LEFT
				local_counter = stepLeft(local_counter);
 366:	c9 01       	movw	r24, r18
 368:	0e 94 1f 01 	call	0x23e	; 0x23e <_Z8stepLefti>
 36c:	9c 01       	movw	r18, r24
				counter = local_counter;
 36e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 372:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
				
				// READ THE VALUES FROM THE WIRELESS TRANSMITTER
				//while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
				ButtonValue = UDR0; // Read the data
 376:	f8 01       	movw	r30, r16
 378:	80 81       	ld	r24, Z
 37a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <ButtonValue>
				
				// PERFORM ACTION DEPENDING ON WHAT VALUE WAS RECIEVED FROM THE WIRELESS TRANSMITTER
				if (ButtonValue <= 35){
 37e:	84 32       	cpi	r24, 0x24	; 36
 380:	08 f4       	brcc	.+2      	; 0x384 <main+0x104>
					PORTB = 0b11111101;
 382:	b5 b8       	out	0x05, r11	; 5
				}
				while (ButtonValue > 35 && ButtonValue <= 105) {
 384:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <ButtonValue>
 388:	8c ed       	ldi	r24, 0xDC	; 220
 38a:	89 0f       	add	r24, r25
 38c:	86 34       	cpi	r24, 0x46	; 70
 38e:	60 f4       	brcc	.+24     	; 0x3a8 <main+0x128>
					PORTB = 0b11111011;
 390:	e5 b8       	out	0x05, r14	; 5
					
					// READ THE VALUES FROM THE WIRELESS TRANSMITTER
					while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
 392:	98 81       	ld	r25, Y
 394:	99 23       	and	r25, r25
 396:	ec f7       	brge	.-6      	; 0x392 <main+0x112>
					ButtonValue = UDR0; // Read the data
 398:	f8 01       	movw	r30, r16
 39a:	90 81       	ld	r25, Z
 39c:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <ButtonValue>
				
				// PERFORM ACTION DEPENDING ON WHAT VALUE WAS RECIEVED FROM THE WIRELESS TRANSMITTER
				if (ButtonValue <= 35){
					PORTB = 0b11111101;
				}
				while (ButtonValue > 35 && ButtonValue <= 105) {
 3a0:	8c ed       	ldi	r24, 0xDC	; 220
 3a2:	89 0f       	add	r24, r25
 3a4:	86 34       	cpi	r24, 0x46	; 70
 3a6:	a0 f3       	brcs	.-24     	; 0x390 <main+0x110>
					
					// READ THE VALUES FROM THE WIRELESS TRANSMITTER
					while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
					ButtonValue = UDR0; // Read the data
				}
				if (ButtonValue > 105 && ButtonValue <= 175) {
 3a8:	9a 56       	subi	r25, 0x6A	; 106
 3aa:	96 34       	cpi	r25, 0x46	; 70
 3ac:	08 f4       	brcc	.+2      	; 0x3b0 <main+0x130>
					PORTB = 0b11110111;
 3ae:	a5 b8       	out	0x05, r10	; 5
				}
				while (ButtonValue >= 175) {
 3b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <ButtonValue>
 3b4:	8f 3a       	cpi	r24, 0xAF	; 175
 3b6:	50 f0       	brcs	.+20     	; 0x3cc <main+0x14c>
					PORTB = 0b11101111;
 3b8:	f5 b8       	out	0x05, r15	; 5
					
					while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
 3ba:	98 81       	ld	r25, Y
 3bc:	99 23       	and	r25, r25
 3be:	ec f7       	brge	.-6      	; 0x3ba <main+0x13a>
					ButtonValue = UDR0; // Read the data
 3c0:	f8 01       	movw	r30, r16
 3c2:	80 81       	ld	r24, Z
 3c4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <ButtonValue>
					ButtonValue = UDR0; // Read the data
				}
				if (ButtonValue > 105 && ButtonValue <= 175) {
					PORTB = 0b11110111;
				}
				while (ButtonValue >= 175) {
 3c8:	8f 3a       	cpi	r24, 0xAF	; 175
 3ca:	b0 f7       	brcc	.-20     	; 0x3b8 <main+0x138>
 3cc:	f1 e0       	ldi	r31, 0x01	; 1
 3ce:	cf 1a       	sub	r12, r31
 3d0:	d1 08       	sbc	r13, r1
				}
				
				
			}

			for (int i = 0; i < 800; i++){
 3d2:	49 f6       	brne	.-110    	; 0x366 <main+0xe6>
 3d4:	78 cf       	rjmp	.-272    	; 0x2c6 <main+0x46>

000003d6 <_exit>:
 3d6:	f8 94       	cli

000003d8 <__stop_program>:
 3d8:	ff cf       	rjmp	.-2      	; 0x3d8 <__stop_program>
