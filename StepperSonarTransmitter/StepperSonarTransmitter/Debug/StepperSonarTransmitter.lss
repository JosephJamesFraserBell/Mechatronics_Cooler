
StepperSonarTransmitter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000494  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000420  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  00000494  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a75  00000000  00000000  00000574  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000717  00000000  00000000  00000fe9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004d5  00000000  00000000  00001700  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000178  00000000  00000000  00001bd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000052b  00000000  00000000  00001d50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000524  00000000  00000000  0000227b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000279f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <main>
  88:	0c 94 0e 02 	jmp	0x41c	; 0x41c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <_Z16initialize_usartv>:
void wait_stepper(volatile int multiple, volatile char time_choice) {
	while (multiple > 0) {
		delay_T_msec_timer1(time_choice);
		multiple--;
	}
}
  90:	88 e1       	ldi	r24, 0x18	; 24
  92:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  96:	86 e0       	ldi	r24, 0x06	; 6
  98:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  9c:	87 e6       	ldi	r24, 0x67	; 103
  9e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  a2:	08 95       	ret

000000a4 <_Z19transmit_data_usarth>:
  a4:	e0 ec       	ldi	r30, 0xC0	; 192
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	90 81       	ld	r25, Z
  aa:	95 ff       	sbrs	r25, 5
  ac:	fd cf       	rjmp	.-6      	; 0xa8 <_Z19transmit_data_usarth+0x4>
  ae:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  b2:	08 95       	ret

000000b4 <_Z19delay_T_msec_timer1c>:
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	1f 92       	push	r1
  ba:	cd b7       	in	r28, 0x3d	; 61
  bc:	de b7       	in	r29, 0x3e	; 62
  be:	89 83       	std	Y+1, r24	; 0x01
  c0:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  c4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  c8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  cc:	89 81       	ldd	r24, Y+1	; 0x01
  ce:	82 30       	cpi	r24, 0x02	; 2
  d0:	69 f0       	breq	.+26     	; 0xec <_Z19delay_T_msec_timer1c+0x38>
  d2:	18 f4       	brcc	.+6      	; 0xda <_Z19delay_T_msec_timer1c+0x26>
  d4:	81 30       	cpi	r24, 0x01	; 1
  d6:	31 f0       	breq	.+12     	; 0xe4 <_Z19delay_T_msec_timer1c+0x30>
  d8:	17 c0       	rjmp	.+46     	; 0x108 <_Z19delay_T_msec_timer1c+0x54>
  da:	83 30       	cpi	r24, 0x03	; 3
  dc:	59 f0       	breq	.+22     	; 0xf4 <_Z19delay_T_msec_timer1c+0x40>
  de:	84 30       	cpi	r24, 0x04	; 4
  e0:	79 f0       	breq	.+30     	; 0x100 <_Z19delay_T_msec_timer1c+0x4c>
  e2:	12 c0       	rjmp	.+36     	; 0x108 <_Z19delay_T_msec_timer1c+0x54>
  e4:	82 e0       	ldi	r24, 0x02	; 2
  e6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  ea:	07 c0       	rjmp	.+14     	; 0xfa <_Z19delay_T_msec_timer1c+0x46>
  ec:	83 e0       	ldi	r24, 0x03	; 3
  ee:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f2:	03 c0       	rjmp	.+6      	; 0xfa <_Z19delay_T_msec_timer1c+0x46>
  f4:	84 e0       	ldi	r24, 0x04	; 4
  f6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  fa:	e4 e8       	ldi	r30, 0x84	; 132
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	08 c0       	rjmp	.+16     	; 0x110 <_Z19delay_T_msec_timer1c+0x5c>
 100:	85 e0       	ldi	r24, 0x05	; 5
 102:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 106:	f9 cf       	rjmp	.-14     	; 0xfa <_Z19delay_T_msec_timer1c+0x46>
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 10e:	f5 cf       	rjmp	.-22     	; 0xfa <_Z19delay_T_msec_timer1c+0x46>
 110:	80 81       	ld	r24, Z
 112:	91 81       	ldd	r25, Z+1	; 0x01
 114:	8a 3f       	cpi	r24, 0xFA	; 250
 116:	91 05       	cpc	r25, r1
 118:	d8 f3       	brcs	.-10     	; 0x110 <_Z19delay_T_msec_timer1c+0x5c>
 11a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 11e:	0f 90       	pop	r0
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	08 95       	ret

00000126 <_Z4waitic>:
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	00 d0       	rcall	.+0      	; 0x12c <_Z4waitic+0x6>
 12c:	1f 92       	push	r1
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
 132:	9a 83       	std	Y+2, r25	; 0x02
 134:	89 83       	std	Y+1, r24	; 0x01
 136:	6b 83       	std	Y+3, r22	; 0x03
 138:	89 81       	ldd	r24, Y+1	; 0x01
 13a:	9a 81       	ldd	r25, Y+2	; 0x02
 13c:	18 16       	cp	r1, r24
 13e:	19 06       	cpc	r1, r25
 140:	9c f4       	brge	.+38     	; 0x168 <_Z4waitic+0x42>
 142:	8b 81       	ldd	r24, Y+3	; 0x03
 144:	0e 94 5a 00 	call	0xb4	; 0xb4 <_Z19delay_T_msec_timer1c>
 148:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ButtonValue>
 14c:	81 32       	cpi	r24, 0x21	; 33
 14e:	10 f0       	brcs	.+4      	; 0x154 <_Z4waitic+0x2e>
 150:	1a 82       	std	Y+2, r1	; 0x02
 152:	19 82       	std	Y+1, r1	; 0x01
 154:	89 81       	ldd	r24, Y+1	; 0x01
 156:	9a 81       	ldd	r25, Y+2	; 0x02
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	9a 83       	std	Y+2, r25	; 0x02
 15c:	89 83       	std	Y+1, r24	; 0x01
 15e:	89 81       	ldd	r24, Y+1	; 0x01
 160:	9a 81       	ldd	r25, Y+2	; 0x02
 162:	18 16       	cp	r1, r24
 164:	19 06       	cpc	r1, r25
 166:	6c f3       	brlt	.-38     	; 0x142 <_Z4waitic+0x1c>
 168:	0f 90       	pop	r0
 16a:	0f 90       	pop	r0
 16c:	0f 90       	pop	r0
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <_Z9stepRighti>:
	//TIFR1 = 0x1<<TOV1;  // Clear TOV1 (note that this is an odd bit in that it
	//is cleared by writing a 1 to it)

} // end delay_T_msec_timer1()

int stepRight(int counter_value){
 174:	0f 93       	push	r16
 176:	1f 93       	push	r17
 178:	cf 93       	push	r28
 17a:	8c 01       	movw	r16, r24
	int counter_right = counter_value + 1;
	PORTC &= ~(1 << PORTC1); //changing direction to step right by clearing pc1
 17c:	41 98       	cbi	0x08, 1	; 8
	wait(5,2);
 17e:	62 e0       	ldi	r22, 0x02	; 2
 180:	85 e0       	ldi	r24, 0x05	; 5
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 93 00 	call	0x126	; 0x126 <_Z4waitic>
	PORTC ^= 1 << PORTC3;
 188:	88 b1       	in	r24, 0x08	; 8
 18a:	c8 e0       	ldi	r28, 0x08	; 8
 18c:	8c 27       	eor	r24, r28
 18e:	88 b9       	out	0x08, r24	; 8
	wait(1,1);
 190:	61 e0       	ldi	r22, 0x01	; 1
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 93 00 	call	0x126	; 0x126 <_Z4waitic>
	PORTC ^= 1 << PORTC3;
 19a:	88 b1       	in	r24, 0x08	; 8
 19c:	c8 27       	eor	r28, r24
 19e:	c8 b9       	out	0x08, r28	; 8
	wait(1,1);
 1a0:	61 e0       	ldi	r22, 0x01	; 1
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 93 00 	call	0x126	; 0x126 <_Z4waitic>
	
	return counter_right;
}
 1aa:	c8 01       	movw	r24, r16
 1ac:	01 96       	adiw	r24, 0x01	; 1
 1ae:	cf 91       	pop	r28
 1b0:	1f 91       	pop	r17
 1b2:	0f 91       	pop	r16
 1b4:	08 95       	ret

000001b6 <_Z8stepLefti>:

int stepLeft(int counter_value){
 1b6:	0f 93       	push	r16
 1b8:	1f 93       	push	r17
 1ba:	cf 93       	push	r28
 1bc:	8c 01       	movw	r16, r24
	int counter_left = counter_value - 1;
	PORTC |= 1 << PORTC1; //changing directon pin to step left by setting pc1
 1be:	41 9a       	sbi	0x08, 1	; 8
	wait(5,2);
 1c0:	62 e0       	ldi	r22, 0x02	; 2
 1c2:	85 e0       	ldi	r24, 0x05	; 5
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 93 00 	call	0x126	; 0x126 <_Z4waitic>
	PORTC ^= 1 << PORTC3;
 1ca:	88 b1       	in	r24, 0x08	; 8
 1cc:	c8 e0       	ldi	r28, 0x08	; 8
 1ce:	8c 27       	eor	r24, r28
 1d0:	88 b9       	out	0x08, r24	; 8
	wait(1,1);
 1d2:	61 e0       	ldi	r22, 0x01	; 1
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 93 00 	call	0x126	; 0x126 <_Z4waitic>
	PORTC ^= 1 << PORTC3;
 1dc:	88 b1       	in	r24, 0x08	; 8
 1de:	c8 27       	eor	r28, r24
 1e0:	c8 b9       	out	0x08, r28	; 8
	wait(1,1);
 1e2:	61 e0       	ldi	r22, 0x01	; 1
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 93 00 	call	0x126	; 0x126 <_Z4waitic>
	
	return counter_left;
}
 1ec:	c8 01       	movw	r24, r16
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	cf 91       	pop	r28
 1f2:	1f 91       	pop	r17
 1f4:	0f 91       	pop	r16
 1f6:	08 95       	ret

000001f8 <main>:
int dir = 0;

int main(void)
{
	// Initialize Data Registers
	DDRD = 0b11110111;
 1f8:	87 ef       	ldi	r24, 0xF7	; 247
 1fa:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0b11111111;
 1fc:	8f ef       	ldi	r24, 0xFF	; 255
 1fe:	87 b9       	out	0x07, r24	; 7
	PORTC = 0b00110000;
 200:	80 e3       	ldi	r24, 0x30	; 48
 202:	88 b9       	out	0x08, r24	; 8
	
	EICRA = 0b00001000;
 204:	88 e0       	ldi	r24, 0x08	; 8
 206:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = 1<<INT1;
 20a:	82 e0       	ldi	r24, 0x02	; 2
 20c:	8d bb       	out	0x1d, r24	; 29
	sei();
 20e:	78 94       	sei
	
	int local_counter = 0;
    initialize_usart(); // Initialize the USART with desired parameters
 210:	0e 94 48 00 	call	0x90	; 0x90 <_Z16initialize_usartv>
	
	EICRA = 0b00001000;
	EIMSK = 1<<INT1;
	sei();
	
	int local_counter = 0;
 214:	00 e0       	ldi	r16, 0x00	; 0
 216:	10 e0       	ldi	r17, 0x00	; 0
    initialize_usart(); // Initialize the USART with desired parameters
	while (1) 
    {
		transmit_data_usart(SonarValue);
		while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
 218:	c0 ec       	ldi	r28, 0xC0	; 192
 21a:	d0 e0       	ldi	r29, 0x00	; 0
		ButtonValue = UDR0; // Read the data
 21c:	0f 2e       	mov	r0, r31
 21e:	f6 ec       	ldi	r31, 0xC6	; 198
 220:	ef 2e       	mov	r14, r31
 222:	f1 2c       	mov	r15, r1
 224:	f0 2d       	mov	r31, r0
			ButtonValue = UDR0; // Read the data
			//Check_Button_Value(local_counter);
		}

		for (int i = 0; i < 800; i++){
			dir = 1;
 226:	cc 24       	eor	r12, r12
 228:	c3 94       	inc	r12
 22a:	d1 2c       	mov	r13, r1
	
	int local_counter = 0;
    initialize_usart(); // Initialize the USART with desired parameters
	while (1) 
    {
		transmit_data_usart(SonarValue);
 22c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <SonarValue>
 230:	0e 94 52 00 	call	0xa4	; 0xa4 <_Z19transmit_data_usarth>
		while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
 234:	88 81       	ld	r24, Y
 236:	88 23       	and	r24, r24
 238:	ec f7       	brge	.-6      	; 0x234 <main+0x3c>
		ButtonValue = UDR0; // Read the data
 23a:	f7 01       	movw	r30, r14
 23c:	80 81       	ld	r24, Z
 23e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ButtonValue>
 242:	0f 2e       	mov	r0, r31
 244:	f0 e2       	ldi	r31, 0x20	; 32
 246:	af 2e       	mov	r10, r31
 248:	f3 e0       	ldi	r31, 0x03	; 3
 24a:	bf 2e       	mov	r11, r31
 24c:	f0 2d       	mov	r31, r0
		for (int i = 0; i < 800; i++){
			dir = 0;
 24e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 252:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			// THIS IS TO GET THE STEPPER MOTOR TO PAN TO THE LEFT
			local_counter = stepRight(local_counter);
 256:	c8 01       	movw	r24, r16
 258:	0e 94 ba 00 	call	0x174	; 0x174 <_Z9stepRighti>
 25c:	8c 01       	movw	r16, r24
			counter = local_counter;
 25e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <counter+0x1>
 262:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <counter>
			
			// READ THE VALUES FROM THE WIRELESS TRANSMITTER
			while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
 266:	88 81       	ld	r24, Y
 268:	88 23       	and	r24, r24
 26a:	ec f7       	brge	.-6      	; 0x266 <main+0x6e>
			ButtonValue = UDR0; // Read the data
 26c:	f7 01       	movw	r30, r14
 26e:	80 81       	ld	r24, Z
 270:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ButtonValue>
 274:	f1 e0       	ldi	r31, 0x01	; 1
 276:	af 1a       	sub	r10, r31
 278:	b1 08       	sbc	r11, r1
	while (1) 
    {
		transmit_data_usart(SonarValue);
		while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
		ButtonValue = UDR0; // Read the data
		for (int i = 0; i < 800; i++){
 27a:	49 f7       	brne	.-46     	; 0x24e <main+0x56>
 27c:	0f 2e       	mov	r0, r31
 27e:	f0 e2       	ldi	r31, 0x20	; 32
 280:	af 2e       	mov	r10, r31
 282:	f3 e0       	ldi	r31, 0x03	; 3
 284:	bf 2e       	mov	r11, r31
 286:	f0 2d       	mov	r31, r0
			ButtonValue = UDR0; // Read the data
			//Check_Button_Value(local_counter);
		}

		for (int i = 0; i < 800; i++){
			dir = 1;
 288:	d0 92 01 01 	sts	0x0101, r13	; 0x800101 <_edata+0x1>
 28c:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <_edata>
			// THIS IS TO GET THE STEPPER MOTOR TO PAN TO THE LEFT
			local_counter = stepLeft(local_counter);
 290:	c8 01       	movw	r24, r16
 292:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_Z8stepLefti>
 296:	8c 01       	movw	r16, r24
			counter = local_counter;
 298:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <counter+0x1>
 29c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <counter>
			
			// READ THE VALUES FROM THE WIRELESS TRANSMITTER
			while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
 2a0:	88 81       	ld	r24, Y
 2a2:	88 23       	and	r24, r24
 2a4:	ec f7       	brge	.-6      	; 0x2a0 <main+0xa8>
			ButtonValue = UDR0; // Read the data
 2a6:	f7 01       	movw	r30, r14
 2a8:	80 81       	ld	r24, Z
 2aa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ButtonValue>
 2ae:	f1 e0       	ldi	r31, 0x01	; 1
 2b0:	af 1a       	sub	r10, r31
 2b2:	b1 08       	sbc	r11, r1
			while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
			ButtonValue = UDR0; // Read the data
			//Check_Button_Value(local_counter);
		}

		for (int i = 0; i < 800; i++){
 2b4:	49 f7       	brne	.-46     	; 0x288 <main+0x90>
 2b6:	ba cf       	rjmp	.-140    	; 0x22c <main+0x34>

000002b8 <_Z15Wheel_Directioni>:
		ButtonValue = UDR0; // Read the data
	}
}

void Wheel_Direction(int counter_value) {
	if (dir == 0) {
 2b8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 2bc:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 2c0:	23 2b       	or	r18, r19
 2c2:	51 f4       	brne	.+20     	; 0x2d8 <_Z15Wheel_Directioni+0x20>
		if (counter_value <= 268)
 2c4:	8d 30       	cpi	r24, 0x0D	; 13
 2c6:	91 40       	sbci	r25, 0x01	; 1
 2c8:	24 f4       	brge	.+8      	; 0x2d2 <_Z15Wheel_Directioni+0x1a>
			SonarValue = 230;
 2ca:	86 ee       	ldi	r24, 0xE6	; 230
 2cc:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <SonarValue>
 2d0:	08 95       	ret
		else if( counter_value <= 380 ){
			SonarValue=135;
		}*/
	}
	else
		SonarValue=135;
 2d2:	87 e8       	ldi	r24, 0x87	; 135
 2d4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <SonarValue>
 2d8:	08 95       	ret

000002da <_Z18Check_Button_Valuei>:
	wait(1,1);
	
	return counter_left;
}

void Check_Button_Value(int local_counter) {
 2da:	ef 92       	push	r14
 2dc:	ff 92       	push	r15
 2de:	1f 93       	push	r17
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
 2e4:	ec 01       	movw	r28, r24
	while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
 2e6:	e0 ec       	ldi	r30, 0xC0	; 192
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	80 81       	ld	r24, Z
 2ec:	88 23       	and	r24, r24
 2ee:	ec f7       	brge	.-6      	; 0x2ea <_Z18Check_Button_Valuei+0x10>
	ButtonValue = UDR0; // Read the data
 2f0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2f4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ButtonValue>
	
	if (ButtonValue <= 35){
 2f8:	84 32       	cpi	r24, 0x24	; 36
 2fa:	60 f4       	brcc	.+24     	; 0x314 <_Z18Check_Button_Valuei+0x3a>
		SonarValue = 5;
 2fc:	85 e0       	ldi	r24, 0x05	; 5
 2fe:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <SonarValue>
		transmit_data_usart(SonarValue);
 302:	0e 94 52 00 	call	0xa4	; 0xa4 <_Z19transmit_data_usarth>
		Wheel_Direction(local_counter);
 306:	ce 01       	movw	r24, r28
 308:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <_Z15Wheel_Directioni>
		transmit_data_usart(SonarValue);
 30c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <SonarValue>
 310:	0e 94 52 00 	call	0xa4	; 0xa4 <_Z19transmit_data_usarth>
	}
	while (ButtonValue > 35 && ButtonValue <= 105) {
 314:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ButtonValue>
 318:	9c ed       	ldi	r25, 0xDC	; 220
 31a:	98 0f       	add	r25, r24
 31c:	96 34       	cpi	r25, 0x46	; 70
 31e:	c0 f4       	brcc	.+48     	; 0x350 <_Z18Check_Button_Valuei+0x76>
		SonarValue = 15;
 320:	1f e0       	ldi	r17, 0x0F	; 15
		transmit_data_usart(SonarValue);
		
		// READ THE VALUES FROM THE WIRELESS TRANSMITTER
		while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
 322:	c0 ec       	ldi	r28, 0xC0	; 192
 324:	d0 e0       	ldi	r29, 0x00	; 0
		ButtonValue = UDR0; // Read the data
 326:	0f 2e       	mov	r0, r31
 328:	f6 ec       	ldi	r31, 0xC6	; 198
 32a:	ef 2e       	mov	r14, r31
 32c:	f1 2c       	mov	r15, r1
 32e:	f0 2d       	mov	r31, r0
		transmit_data_usart(SonarValue);
		Wheel_Direction(local_counter);
		transmit_data_usart(SonarValue);
	}
	while (ButtonValue > 35 && ButtonValue <= 105) {
		SonarValue = 15;
 330:	10 93 03 01 	sts	0x0103, r17	; 0x800103 <SonarValue>
		transmit_data_usart(SonarValue);
 334:	81 2f       	mov	r24, r17
 336:	0e 94 52 00 	call	0xa4	; 0xa4 <_Z19transmit_data_usarth>
		
		// READ THE VALUES FROM THE WIRELESS TRANSMITTER
		while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
 33a:	88 81       	ld	r24, Y
 33c:	88 23       	and	r24, r24
 33e:	ec f7       	brge	.-6      	; 0x33a <_Z18Check_Button_Valuei+0x60>
		ButtonValue = UDR0; // Read the data
 340:	f7 01       	movw	r30, r14
 342:	80 81       	ld	r24, Z
 344:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ButtonValue>
		SonarValue = 5;
		transmit_data_usart(SonarValue);
		Wheel_Direction(local_counter);
		transmit_data_usart(SonarValue);
	}
	while (ButtonValue > 35 && ButtonValue <= 105) {
 348:	9c ed       	ldi	r25, 0xDC	; 220
 34a:	98 0f       	add	r25, r24
 34c:	96 34       	cpi	r25, 0x46	; 70
 34e:	80 f3       	brcs	.-32     	; 0x330 <_Z18Check_Button_Valuei+0x56>
		
		// READ THE VALUES FROM THE WIRELESS TRANSMITTER
		while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
		ButtonValue = UDR0; // Read the data
	}
	if (ButtonValue > 105 && ButtonValue <= 175) {
 350:	8a 56       	subi	r24, 0x6A	; 106
 352:	86 34       	cpi	r24, 0x46	; 70
 354:	40 f4       	brcc	.+16     	; 0x366 <_Z18Check_Button_Valuei+0x8c>
		SonarValue = 25;
 356:	89 e1       	ldi	r24, 0x19	; 25
 358:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <SonarValue>
		transmit_data_usart(SonarValue);
 35c:	0e 94 52 00 	call	0xa4	; 0xa4 <_Z19transmit_data_usarth>
		//wait_stepper(5000,2); // this is the wait for the lid to close
		SonarValue = 5;
 360:	85 e0       	ldi	r24, 0x05	; 5
 362:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <SonarValue>
	}
	while (ButtonValue > 175) {
 366:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ButtonValue>
 36a:	80 3b       	cpi	r24, 0xB0	; 176
 36c:	b0 f0       	brcs	.+44     	; 0x39a <_Z18Check_Button_Valuei+0xc0>
		SonarValue = 35;
 36e:	13 e2       	ldi	r17, 0x23	; 35
		transmit_data_usart(SonarValue);
		
		while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
 370:	c0 ec       	ldi	r28, 0xC0	; 192
 372:	d0 e0       	ldi	r29, 0x00	; 0
		ButtonValue = UDR0; // Read the data
 374:	0f 2e       	mov	r0, r31
 376:	f6 ec       	ldi	r31, 0xC6	; 198
 378:	ef 2e       	mov	r14, r31
 37a:	f1 2c       	mov	r15, r1
 37c:	f0 2d       	mov	r31, r0
		transmit_data_usart(SonarValue);
		//wait_stepper(5000,2); // this is the wait for the lid to close
		SonarValue = 5;
	}
	while (ButtonValue > 175) {
		SonarValue = 35;
 37e:	10 93 03 01 	sts	0x0103, r17	; 0x800103 <SonarValue>
		transmit_data_usart(SonarValue);
 382:	81 2f       	mov	r24, r17
 384:	0e 94 52 00 	call	0xa4	; 0xa4 <_Z19transmit_data_usarth>
		
		while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
 388:	88 81       	ld	r24, Y
 38a:	88 23       	and	r24, r24
 38c:	ec f7       	brge	.-6      	; 0x388 <_Z18Check_Button_Valuei+0xae>
		ButtonValue = UDR0; // Read the data
 38e:	f7 01       	movw	r30, r14
 390:	80 81       	ld	r24, Z
 392:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ButtonValue>
		SonarValue = 25;
		transmit_data_usart(SonarValue);
		//wait_stepper(5000,2); // this is the wait for the lid to close
		SonarValue = 5;
	}
	while (ButtonValue > 175) {
 396:	80 3b       	cpi	r24, 0xB0	; 176
 398:	90 f7       	brcc	.-28     	; 0x37e <_Z18Check_Button_Valuei+0xa4>
		transmit_data_usart(SonarValue);
		
		while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
		ButtonValue = UDR0; // Read the data
	}
}
 39a:	df 91       	pop	r29
 39c:	cf 91       	pop	r28
 39e:	1f 91       	pop	r17
 3a0:	ff 90       	pop	r15
 3a2:	ef 90       	pop	r14
 3a4:	08 95       	ret

000003a6 <__vector_2>:
			//Check_Button_Value(local_counter);
		}
    }
}

ISR(INT1_vect) {
 3a6:	1f 92       	push	r1
 3a8:	0f 92       	push	r0
 3aa:	0f b6       	in	r0, 0x3f	; 63
 3ac:	0f 92       	push	r0
 3ae:	11 24       	eor	r1, r1
 3b0:	2f 93       	push	r18
 3b2:	3f 93       	push	r19
 3b4:	4f 93       	push	r20
 3b6:	5f 93       	push	r21
 3b8:	6f 93       	push	r22
 3ba:	7f 93       	push	r23
 3bc:	8f 93       	push	r24
 3be:	9f 93       	push	r25
 3c0:	af 93       	push	r26
 3c2:	bf 93       	push	r27
 3c4:	ef 93       	push	r30
 3c6:	ff 93       	push	r31
	while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
 3c8:	e0 ec       	ldi	r30, 0xC0	; 192
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	80 81       	ld	r24, Z
 3ce:	88 23       	and	r24, r24
 3d0:	ec f7       	brge	.-6      	; 0x3cc <__vector_2+0x26>
	ButtonValue = UDR0; // Read the data
 3d2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 3d6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ButtonValue>
	
	Check_Button_Value(counter);
 3da:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <counter>
 3de:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <counter+0x1>
 3e2:	0e 94 6d 01 	call	0x2da	; 0x2da <_Z18Check_Button_Valuei>
	transmit_data_usart(SonarValue);
 3e6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <SonarValue>
 3ea:	0e 94 52 00 	call	0xa4	; 0xa4 <_Z19transmit_data_usarth>
	wait(10,2);	
 3ee:	62 e0       	ldi	r22, 0x02	; 2
 3f0:	8a e0       	ldi	r24, 0x0A	; 10
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	0e 94 93 00 	call	0x126	; 0x126 <_Z4waitic>
		
	EIFR = EIFR | 1<<INTF1;
 3f8:	e1 9a       	sbi	0x1c, 1	; 28
}
 3fa:	ff 91       	pop	r31
 3fc:	ef 91       	pop	r30
 3fe:	bf 91       	pop	r27
 400:	af 91       	pop	r26
 402:	9f 91       	pop	r25
 404:	8f 91       	pop	r24
 406:	7f 91       	pop	r23
 408:	6f 91       	pop	r22
 40a:	5f 91       	pop	r21
 40c:	4f 91       	pop	r20
 40e:	3f 91       	pop	r19
 410:	2f 91       	pop	r18
 412:	0f 90       	pop	r0
 414:	0f be       	out	0x3f, r0	; 63
 416:	0f 90       	pop	r0
 418:	1f 90       	pop	r1
 41a:	18 95       	reti

0000041c <_exit>:
 41c:	f8 94       	cli

0000041e <__stop_program>:
 41e:	ff cf       	rjmp	.-2      	; 0x41e <__stop_program>
