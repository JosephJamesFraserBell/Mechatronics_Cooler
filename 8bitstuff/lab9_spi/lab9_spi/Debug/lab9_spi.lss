
lab9_spi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000292  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000292  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009df  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000675  00000000  00000000  00000d1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000348  00000000  00000000  00001390  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  000016d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f3  00000000  00000000  0000174c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000124  00000000  00000000  00001b3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001c63  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 a7 00 	call	0x14e	; 0x14e <main>
  78:	0c 94 1d 01 	jmp	0x23a	; 0x23a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z15send_to_MAX7221hh>:
	};
}

int send_to_MAX7221(unsigned char command, unsigned char data)
{
	PORTB = PORTB & 0b11111011; // Clear PB2, which is the SS bit, so that
  80:	2a 98       	cbi	0x05, 2	; 5
	// transmission can begin
	SPDR = command; // Send command
  82:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))); // Wait for transmission to finish
  84:	0d b4       	in	r0, 0x2d	; 45
  86:	07 fe       	sbrs	r0, 7
  88:	fd cf       	rjmp	.-6      	; 0x84 <_Z15send_to_MAX7221hh+0x4>
	SPDR = data; // Send data
  8a:	6e bd       	out	0x2e, r22	; 46
	while(!(SPSR & (1<<SPIF))); // Wait for transmission to finish
  8c:	0d b4       	in	r0, 0x2d	; 45
  8e:	07 fe       	sbrs	r0, 7
  90:	fd cf       	rjmp	.-6      	; 0x8c <_Z15send_to_MAX7221hh+0xc>
	PORTB = PORTB | 0b00000100; // Return PB2 to 1, which is the SS bit, to end
  92:	2a 9a       	sbi	0x05, 2	; 5
	// transmission
	return 0;
}
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	08 95       	ret

0000009a <_Z19delay_T_msec_timer1c>:
		delay_T_msec_timer1(time_choice); // we are choosing case 2, which is a 1 msec delay
		multiple--;
	}
} // end wait()

void delay_T_msec_timer1(volatile char choice) {
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	1f 92       	push	r1
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62
  a4:	89 83       	std	Y+1, r24	; 0x01
	//Default: T = .0156 msec for no prescaler and count of 250 (preload counter with 65,535-5)

	//Inputs: None
	//Outputs: None

	TCCR1A = 0x00; // clears WGM00 and WGM01 (bits 0 and 1) to ensure Timer/Counter is in normal mode.
  a6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCNT1 = 0;  // preload load TIMER1 with 5 if counting to 255 (count must reach 65,535-5 = 250)
  aa:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  ae:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	// or preload with 0 and count to 250

	switch ( choice ) { // choose prescaler
  b2:	89 81       	ldd	r24, Y+1	; 0x01
  b4:	82 30       	cpi	r24, 0x02	; 2
  b6:	69 f0       	breq	.+26     	; 0xd2 <_Z19delay_T_msec_timer1c+0x38>
  b8:	18 f4       	brcc	.+6      	; 0xc0 <_Z19delay_T_msec_timer1c+0x26>
  ba:	81 30       	cpi	r24, 0x01	; 1
  bc:	31 f0       	breq	.+12     	; 0xca <_Z19delay_T_msec_timer1c+0x30>
  be:	17 c0       	rjmp	.+46     	; 0xee <_Z19delay_T_msec_timer1c+0x54>
  c0:	83 30       	cpi	r24, 0x03	; 3
  c2:	59 f0       	breq	.+22     	; 0xda <_Z19delay_T_msec_timer1c+0x40>
  c4:	84 30       	cpi	r24, 0x04	; 4
  c6:	79 f0       	breq	.+30     	; 0xe6 <_Z19delay_T_msec_timer1c+0x4c>
  c8:	12 c0       	rjmp	.+36     	; 0xee <_Z19delay_T_msec_timer1c+0x54>
		case 1:
		TCCR1B = 1<<CS11;//TCCR1B = 0x02; // Start TIMER1, Normal mode, crystal clock, prescaler = 8
  ca:	82 e0       	ldi	r24, 0x02	; 2
  cc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		break;
  d0:	07 c0       	rjmp	.+14     	; 0xe0 <_Z19delay_T_msec_timer1c+0x46>
		case 2:
		TCCR1B =  1<<CS11 | 1<<CS10;//TCCR1B = 0x03;  // Start TIMER1, Normal mode, crystal clock, prescaler = 64
  d2:	83 e0       	ldi	r24, 0x03	; 3
  d4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		break;
  d8:	03 c0       	rjmp	.+6      	; 0xe0 <_Z19delay_T_msec_timer1c+0x46>
		case 3:
		TCCR1B = 1<<CS12;//TCCR1B = 0x04; // Start TIMER1, Normal mode, crystal clock, prescaler = 256
  da:	84 e0       	ldi	r24, 0x04	; 4
  dc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		break;
	}

	//while ((TIFR1 & (0x1<<TOV1)) == 0); // wait for TOV1 to roll over at 255 (requires preload of 65,535-5 to make count = 250)
	// How does this while loop work?? See notes
	while (TCNT1 < 0xfa); // exits when count = 250 (requires preload of 0 to make count = 250)
  e0:	e4 e8       	ldi	r30, 0x84	; 132
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	08 c0       	rjmp	.+16     	; 0xf6 <_Z19delay_T_msec_timer1c+0x5c>
		break;
		case 3:
		TCCR1B = 1<<CS12;//TCCR1B = 0x04; // Start TIMER1, Normal mode, crystal clock, prescaler = 256
		break;
		case 4:
		TCCR1B = 1<<CS12 | 1<<CS10;//TCCR1B = 0x05; // Start TIMER1, Normal mode, crystal clock, prescaler = 1024
  e6:	85 e0       	ldi	r24, 0x05	; 5
  e8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		break;
  ec:	f9 cf       	rjmp	.-14     	; 0xe0 <_Z19delay_T_msec_timer1c+0x46>
		default:
		TCCR1A = 1<<CS10;//TCCR1B = 0x01; Start TIMER1, Normal mode, crystal clock, no prescaler
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
		break;
  f4:	f5 cf       	rjmp	.-22     	; 0xe0 <_Z19delay_T_msec_timer1c+0x46>
	}

	//while ((TIFR1 & (0x1<<TOV1)) == 0); // wait for TOV1 to roll over at 255 (requires preload of 65,535-5 to make count = 250)
	// How does this while loop work?? See notes
	while (TCNT1 < 0xfa); // exits when count = 250 (requires preload of 0 to make count = 250)
  f6:	80 81       	ld	r24, Z
  f8:	91 81       	ldd	r25, Z+1	; 0x01
  fa:	8a 3f       	cpi	r24, 0xFA	; 250
  fc:	91 05       	cpc	r25, r1
  fe:	d8 f3       	brcs	.-10     	; 0xf6 <_Z19delay_T_msec_timer1c+0x5c>

	TCCR1B = 0x00; // Stop TIMER1
 100:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	//TIFR1 = 0x1<<TOV1;  // Clear TOV1 (note that this is an odd bit in that it
	//is cleared by writing a 1 to it)

 104:	0f 90       	pop	r0
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <_Z4waitic>:
	PORTB = PORTB | 0b00000100; // Return PB2 to 1, which is the SS bit, to end
	// transmission
	return 0;
}

void wait(volatile int multiple, volatile char time_choice) {
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	00 d0       	rcall	.+0      	; 0x112 <_Z4waitic+0x6>
 112:	1f 92       	push	r1
 114:	cd b7       	in	r28, 0x3d	; 61
 116:	de b7       	in	r29, 0x3e	; 62
 118:	9a 83       	std	Y+2, r25	; 0x02
 11a:	89 83       	std	Y+1, r24	; 0x01
 11c:	6b 83       	std	Y+3, r22	; 0x03
	
		Inputs: multiple = number of multiples to delay, where multiple is the number of times an actual delay loop is called.
		Outputs: None
	*/
	
	while (multiple > 0) {
 11e:	89 81       	ldd	r24, Y+1	; 0x01
 120:	9a 81       	ldd	r25, Y+2	; 0x02
 122:	18 16       	cp	r1, r24
 124:	19 06       	cpc	r1, r25
 126:	6c f4       	brge	.+26     	; 0x142 <_Z4waitic+0x36>
		delay_T_msec_timer1(time_choice); // we are choosing case 2, which is a 1 msec delay
 128:	8b 81       	ldd	r24, Y+3	; 0x03
 12a:	0e 94 4d 00 	call	0x9a	; 0x9a <_Z19delay_T_msec_timer1c>
		multiple--;
 12e:	89 81       	ldd	r24, Y+1	; 0x01
 130:	9a 81       	ldd	r25, Y+2	; 0x02
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	9a 83       	std	Y+2, r25	; 0x02
 136:	89 83       	std	Y+1, r24	; 0x01
	
		Inputs: multiple = number of multiples to delay, where multiple is the number of times an actual delay loop is called.
		Outputs: None
	*/
	
	while (multiple > 0) {
 138:	89 81       	ldd	r24, Y+1	; 0x01
 13a:	9a 81       	ldd	r25, Y+2	; 0x02
 13c:	18 16       	cp	r1, r24
 13e:	19 06       	cpc	r1, r25
 140:	9c f3       	brlt	.-26     	; 0x128 <_Z4waitic+0x1c>
		delay_T_msec_timer1(time_choice); // we are choosing case 2, which is a 1 msec delay
		multiple--;
	}
} // end wait()
 142:	0f 90       	pop	r0
 144:	0f 90       	pop	r0
 146:	0f 90       	pop	r0
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <main>:
void delay_T_msec_timer1(volatile char choice);

int main(void)
{
	// Set up Master SPI
	SPCR = 1<<SPE | 1<<MSTR | 1<<SPR0;
 14e:	81 e5       	ldi	r24, 0x51	; 81
 150:	8c bd       	out	0x2c, r24	; 44
    DDRB = 1<<PORTB5 | 1<<PORTB3 | 1<<PORTB2; // Set pins SCK, MOSI, and SS as output
 152:	8c e2       	ldi	r24, 0x2C	; 44
 154:	84 b9       	out	0x04, r24	; 4
	
	send_to_MAX7221(0b00001001,0b11111111);
 156:	6f ef       	ldi	r22, 0xFF	; 255
 158:	89 e0       	ldi	r24, 0x09	; 9
 15a:	0e 94 40 00 	call	0x80	; 0x80 <_Z15send_to_MAX7221hh>
	send_to_MAX7221(0b00001011,0b00000011);
 15e:	63 e0       	ldi	r22, 0x03	; 3
 160:	8b e0       	ldi	r24, 0x0B	; 11
 162:	0e 94 40 00 	call	0x80	; 0x80 <_Z15send_to_MAX7221hh>
	send_to_MAX7221(0b00001100,0b00000001);
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	8c e0       	ldi	r24, 0x0C	; 12
 16a:	0e 94 40 00 	call	0x80	; 0x80 <_Z15send_to_MAX7221hh>
	send_to_MAX7221(0b00001010,0b11111111);
 16e:	6f ef       	ldi	r22, 0xFF	; 255
 170:	8a e0       	ldi	r24, 0x0A	; 10
 172:	0e 94 40 00 	call	0x80	; 0x80 <_Z15send_to_MAX7221hh>
	while (1) {
	send_to_MAX7221(0b00000001,0b00001000);
 176:	68 e0       	ldi	r22, 0x08	; 8
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	0e 94 40 00 	call	0x80	; 0x80 <_Z15send_to_MAX7221hh>
	wait(1000,2);
 17e:	62 e0       	ldi	r22, 0x02	; 2
 180:	88 ee       	ldi	r24, 0xE8	; 232
 182:	93 e0       	ldi	r25, 0x03	; 3
 184:	0e 94 86 00 	call	0x10c	; 0x10c <_Z4waitic>
	send_to_MAX7221(0b00001100,0b00000000);
 188:	60 e0       	ldi	r22, 0x00	; 0
 18a:	8c e0       	ldi	r24, 0x0C	; 12
 18c:	0e 94 40 00 	call	0x80	; 0x80 <_Z15send_to_MAX7221hh>
	wait(1000,2);
 190:	62 e0       	ldi	r22, 0x02	; 2
 192:	88 ee       	ldi	r24, 0xE8	; 232
 194:	93 e0       	ldi	r25, 0x03	; 3
 196:	0e 94 86 00 	call	0x10c	; 0x10c <_Z4waitic>
	send_to_MAX7221(0b00001100,0b00000001);
 19a:	61 e0       	ldi	r22, 0x01	; 1
 19c:	8c e0       	ldi	r24, 0x0C	; 12
 19e:	0e 94 40 00 	call	0x80	; 0x80 <_Z15send_to_MAX7221hh>

	send_to_MAX7221(0b00000001,0b00000000);
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	0e 94 40 00 	call	0x80	; 0x80 <_Z15send_to_MAX7221hh>
	wait(1000,2);
 1aa:	62 e0       	ldi	r22, 0x02	; 2
 1ac:	88 ee       	ldi	r24, 0xE8	; 232
 1ae:	93 e0       	ldi	r25, 0x03	; 3
 1b0:	0e 94 86 00 	call	0x10c	; 0x10c <_Z4waitic>
	send_to_MAX7221(0b00001100,0b00000000);
 1b4:	60 e0       	ldi	r22, 0x00	; 0
 1b6:	8c e0       	ldi	r24, 0x0C	; 12
 1b8:	0e 94 40 00 	call	0x80	; 0x80 <_Z15send_to_MAX7221hh>
	wait(1000,2);
 1bc:	62 e0       	ldi	r22, 0x02	; 2
 1be:	88 ee       	ldi	r24, 0xE8	; 232
 1c0:	93 e0       	ldi	r25, 0x03	; 3
 1c2:	0e 94 86 00 	call	0x10c	; 0x10c <_Z4waitic>
	send_to_MAX7221(0b00001100,0b00000001);
 1c6:	61 e0       	ldi	r22, 0x01	; 1
 1c8:	8c e0       	ldi	r24, 0x0C	; 12
 1ca:	0e 94 40 00 	call	0x80	; 0x80 <_Z15send_to_MAX7221hh>
	
	send_to_MAX7221(0b00000001,0b00000000);
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	0e 94 40 00 	call	0x80	; 0x80 <_Z15send_to_MAX7221hh>
	wait(1000,2);
 1d6:	62 e0       	ldi	r22, 0x02	; 2
 1d8:	88 ee       	ldi	r24, 0xE8	; 232
 1da:	93 e0       	ldi	r25, 0x03	; 3
 1dc:	0e 94 86 00 	call	0x10c	; 0x10c <_Z4waitic>
	send_to_MAX7221(0b00001100,0b00000000);
 1e0:	60 e0       	ldi	r22, 0x00	; 0
 1e2:	8c e0       	ldi	r24, 0x0C	; 12
 1e4:	0e 94 40 00 	call	0x80	; 0x80 <_Z15send_to_MAX7221hh>
	wait(1000,2);
 1e8:	62 e0       	ldi	r22, 0x02	; 2
 1ea:	88 ee       	ldi	r24, 0xE8	; 232
 1ec:	93 e0       	ldi	r25, 0x03	; 3
 1ee:	0e 94 86 00 	call	0x10c	; 0x10c <_Z4waitic>
	send_to_MAX7221(0b00001100,0b00000001);
 1f2:	61 e0       	ldi	r22, 0x01	; 1
 1f4:	8c e0       	ldi	r24, 0x0C	; 12
 1f6:	0e 94 40 00 	call	0x80	; 0x80 <_Z15send_to_MAX7221hh>
	
	send_to_MAX7221(0b00000001,0b00001000);
 1fa:	68 e0       	ldi	r22, 0x08	; 8
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	0e 94 40 00 	call	0x80	; 0x80 <_Z15send_to_MAX7221hh>
	wait(1000,2);
 202:	62 e0       	ldi	r22, 0x02	; 2
 204:	88 ee       	ldi	r24, 0xE8	; 232
 206:	93 e0       	ldi	r25, 0x03	; 3
 208:	0e 94 86 00 	call	0x10c	; 0x10c <_Z4waitic>
	send_to_MAX7221(0b00001100,0b00000000);
 20c:	60 e0       	ldi	r22, 0x00	; 0
 20e:	8c e0       	ldi	r24, 0x0C	; 12
 210:	0e 94 40 00 	call	0x80	; 0x80 <_Z15send_to_MAX7221hh>
	wait(1000,2);
 214:	62 e0       	ldi	r22, 0x02	; 2
 216:	88 ee       	ldi	r24, 0xE8	; 232
 218:	93 e0       	ldi	r25, 0x03	; 3
 21a:	0e 94 86 00 	call	0x10c	; 0x10c <_Z4waitic>
	send_to_MAX7221(0b00001100,0b00000001);
 21e:	61 e0       	ldi	r22, 0x01	; 1
 220:	8c e0       	ldi	r24, 0x0C	; 12
 222:	0e 94 40 00 	call	0x80	; 0x80 <_Z15send_to_MAX7221hh>
	
	send_to_MAX7221(0b00000001,0b00000101);
 226:	65 e0       	ldi	r22, 0x05	; 5
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	0e 94 40 00 	call	0x80	; 0x80 <_Z15send_to_MAX7221hh>
    wait(5000,2);
 22e:	62 e0       	ldi	r22, 0x02	; 2
 230:	88 e8       	ldi	r24, 0x88	; 136
 232:	93 e1       	ldi	r25, 0x13	; 19
 234:	0e 94 86 00 	call	0x10c	; 0x10c <_Z4waitic>
 238:	9e cf       	rjmp	.-196    	; 0x176 <main+0x28>

0000023a <_exit>:
 23a:	f8 94       	cli

0000023c <__stop_program>:
 23c:	ff cf       	rjmp	.-2      	; 0x23c <__stop_program>
