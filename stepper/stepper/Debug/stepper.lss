
stepper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000272  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000272  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000272  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000852  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000674  00000000  00000000  00000b76  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ce  00000000  00000000  000011ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  000014b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f4  00000000  00000000  0000154c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001c9  00000000  00000000  00001940  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001b09  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <main>
  88:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <_Z19delay_T_msec_timer1c>:
while (multiple > 0) {
    delay_T_msec_timer1(time_choice);
    multiple--;
}
} // end wait()
void delay_T_msec_timer1(volatile char choice) {
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	1f 92       	push	r1
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	89 83       	std	Y+1, r24	; 0x01
	//Default: T = .0156 msec for no prescaler and count of 250 (preload counter with 65,535-5)

	//Inputs: None
	//Outputs: None

	TCCR1A = 0x00; // clears WGM00 and WGM01 (bits 0 and 1) to ensure Timer/Counter is in normal mode.
  9c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCNT1 = 0;  // preload load TIMER1 with 5 if counting to 255 (count must reach 65,535-5 = 250)
  a0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  a4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	// or preload with 0 and count to 250

	switch ( choice ) { // choose prescaler
  a8:	89 81       	ldd	r24, Y+1	; 0x01
  aa:	82 30       	cpi	r24, 0x02	; 2
  ac:	69 f0       	breq	.+26     	; 0xc8 <_Z19delay_T_msec_timer1c+0x38>
  ae:	18 f4       	brcc	.+6      	; 0xb6 <_Z19delay_T_msec_timer1c+0x26>
  b0:	81 30       	cpi	r24, 0x01	; 1
  b2:	31 f0       	breq	.+12     	; 0xc0 <_Z19delay_T_msec_timer1c+0x30>
  b4:	17 c0       	rjmp	.+46     	; 0xe4 <_Z19delay_T_msec_timer1c+0x54>
  b6:	83 30       	cpi	r24, 0x03	; 3
  b8:	59 f0       	breq	.+22     	; 0xd0 <_Z19delay_T_msec_timer1c+0x40>
  ba:	84 30       	cpi	r24, 0x04	; 4
  bc:	79 f0       	breq	.+30     	; 0xdc <_Z19delay_T_msec_timer1c+0x4c>
  be:	12 c0       	rjmp	.+36     	; 0xe4 <_Z19delay_T_msec_timer1c+0x54>
		case 1:
		TCCR1B = 1<<CS11;//TCCR1B = 0x02; // Start TIMER1, Normal mode, crystal clock, prescaler = 8
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		break;
  c6:	07 c0       	rjmp	.+14     	; 0xd6 <_Z19delay_T_msec_timer1c+0x46>
		case 2:
		TCCR1B =  1<<CS11 | 1<<CS10;//TCCR1B = 0x03;  // Start TIMER1, Normal mode, crystal clock, prescaler = 64
  c8:	83 e0       	ldi	r24, 0x03	; 3
  ca:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		break;
  ce:	03 c0       	rjmp	.+6      	; 0xd6 <_Z19delay_T_msec_timer1c+0x46>
		case 3:
		TCCR1B = 1<<CS12;//TCCR1B = 0x04; // Start TIMER1, Normal mode, crystal clock, prescaler = 256
  d0:	84 e0       	ldi	r24, 0x04	; 4
  d2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		break;
	}

	//while ((TIFR1 & (0x1<<TOV1)) == 0); // wait for TOV1 to roll over at 255 (requires preload of 65,535-5 to make count = 250)
	// How does this while loop work?? See notes
	while (TCNT1 < 0xfa); // exits when count = 250 (requires preload of 0 to make count = 250)
  d6:	e4 e8       	ldi	r30, 0x84	; 132
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	08 c0       	rjmp	.+16     	; 0xec <_Z19delay_T_msec_timer1c+0x5c>
		break;
		case 3:
		TCCR1B = 1<<CS12;//TCCR1B = 0x04; // Start TIMER1, Normal mode, crystal clock, prescaler = 256
		break;
		case 4:
		TCCR1B = 1<<CS12 | 1<<CS10;//TCCR1B = 0x05; // Start TIMER1, Normal mode, crystal clock, prescaler = 1024
  dc:	85 e0       	ldi	r24, 0x05	; 5
  de:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		break;
  e2:	f9 cf       	rjmp	.-14     	; 0xd6 <_Z19delay_T_msec_timer1c+0x46>
		default:
		TCCR1A = 1<<CS10;//TCCR1B = 0x01; Start TIMER1, Normal mode, crystal clock, no prescaler
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
		break;
  ea:	f5 cf       	rjmp	.-22     	; 0xd6 <_Z19delay_T_msec_timer1c+0x46>
	}

	//while ((TIFR1 & (0x1<<TOV1)) == 0); // wait for TOV1 to roll over at 255 (requires preload of 65,535-5 to make count = 250)
	// How does this while loop work?? See notes
	while (TCNT1 < 0xfa); // exits when count = 250 (requires preload of 0 to make count = 250)
  ec:	80 81       	ld	r24, Z
  ee:	91 81       	ldd	r25, Z+1	; 0x01
  f0:	8a 3f       	cpi	r24, 0xFA	; 250
  f2:	91 05       	cpc	r25, r1
  f4:	d8 f3       	brcs	.-10     	; 0xec <_Z19delay_T_msec_timer1c+0x5c>

	TCCR1B = 0x00; // Stop TIMER1
  f6:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	//TIFR1 = 0x1<<TOV1;  // Clear TOV1 (note that this is an odd bit in that it
	//is cleared by writing a 1 to it)

} // end delay_T_msec_timer1()
  fa:	0f 90       	pop	r0
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	08 95       	ret

00000102 <_Z4waitic>:
		
    }
	return 0;
}

void wait(volatile int multiple, volatile char time_choice) {
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	00 d0       	rcall	.+0      	; 0x108 <_Z4waitic+0x6>
 108:	1f 92       	push	r1
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
 10e:	9a 83       	std	Y+2, r25	; 0x02
 110:	89 83       	std	Y+1, r24	; 0x01
 112:	6b 83       	std	Y+3, r22	; 0x03
created by the called function.
    Inputs: multiple = number of multiples to delay, where multiple is
the number of times an actual delay loop is called.
    Outputs: None
*/
while (multiple > 0) {
 114:	89 81       	ldd	r24, Y+1	; 0x01
 116:	9a 81       	ldd	r25, Y+2	; 0x02
 118:	18 16       	cp	r1, r24
 11a:	19 06       	cpc	r1, r25
 11c:	6c f4       	brge	.+26     	; 0x138 <_Z4waitic+0x36>
    delay_T_msec_timer1(time_choice);
 11e:	8b 81       	ldd	r24, Y+3	; 0x03
 120:	0e 94 48 00 	call	0x90	; 0x90 <_Z19delay_T_msec_timer1c>
    multiple--;
 124:	89 81       	ldd	r24, Y+1	; 0x01
 126:	9a 81       	ldd	r25, Y+2	; 0x02
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	9a 83       	std	Y+2, r25	; 0x02
 12c:	89 83       	std	Y+1, r24	; 0x01
created by the called function.
    Inputs: multiple = number of multiples to delay, where multiple is
the number of times an actual delay loop is called.
    Outputs: None
*/
while (multiple > 0) {
 12e:	89 81       	ldd	r24, Y+1	; 0x01
 130:	9a 81       	ldd	r25, Y+2	; 0x02
 132:	18 16       	cp	r1, r24
 134:	19 06       	cpc	r1, r25
 136:	9c f3       	brlt	.-26     	; 0x11e <_Z4waitic+0x1c>
    delay_T_msec_timer1(time_choice);
    multiple--;
}
} // end wait()
 138:	0f 90       	pop	r0
 13a:	0f 90       	pop	r0
 13c:	0f 90       	pop	r0
 13e:	df 91       	pop	r29
 140:	cf 91       	pop	r28
 142:	08 95       	ret

00000144 <_Z9stepRightv>:
	//TIFR1 = 0x1<<TOV1;  // Clear TOV1 (note that this is an odd bit in that it
	//is cleared by writing a 1 to it)

} // end delay_T_msec_timer1()

void stepRight(){
 144:	cf 93       	push	r28
	counter++;
 146:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 14a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 14e:	01 96       	adiw	r24, 0x01	; 1
 150:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 154:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	PORTC &= ~(1 << PORTC1); //changing direction to step right by clearing pc1
 158:	41 98       	cbi	0x08, 1	; 8
	wait(5,2);
 15a:	62 e0       	ldi	r22, 0x02	; 2
 15c:	85 e0       	ldi	r24, 0x05	; 5
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 81 00 	call	0x102	; 0x102 <_Z4waitic>
	PORTC ^= 1 << PORTC3;
 164:	88 b1       	in	r24, 0x08	; 8
 166:	c8 e0       	ldi	r28, 0x08	; 8
 168:	8c 27       	eor	r24, r28
 16a:	88 b9       	out	0x08, r24	; 8
	wait(50,2);
 16c:	62 e0       	ldi	r22, 0x02	; 2
 16e:	82 e3       	ldi	r24, 0x32	; 50
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 81 00 	call	0x102	; 0x102 <_Z4waitic>
	PORTC ^= 1 << PORTC3;
 176:	88 b1       	in	r24, 0x08	; 8
 178:	c8 27       	eor	r28, r24
 17a:	c8 b9       	out	0x08, r28	; 8
	wait(50,2);
 17c:	62 e0       	ldi	r22, 0x02	; 2
 17e:	82 e3       	ldi	r24, 0x32	; 50
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 81 00 	call	0x102	; 0x102 <_Z4waitic>
}
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <_Z8stepLeftv>:

void stepLeft(){
 18a:	cf 93       	push	r28
	counter--;
 18c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 190:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 19a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	PORTC |= 1 << PORTC1; //changing directon pin to step left by setting pc1
 19e:	41 9a       	sbi	0x08, 1	; 8
	wait(5,2);
 1a0:	62 e0       	ldi	r22, 0x02	; 2
 1a2:	85 e0       	ldi	r24, 0x05	; 5
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 81 00 	call	0x102	; 0x102 <_Z4waitic>
	PORTC ^= 1 << PORTC3;
 1aa:	88 b1       	in	r24, 0x08	; 8
 1ac:	c8 e0       	ldi	r28, 0x08	; 8
 1ae:	8c 27       	eor	r24, r28
 1b0:	88 b9       	out	0x08, r24	; 8
	wait(50,2);
 1b2:	62 e0       	ldi	r22, 0x02	; 2
 1b4:	82 e3       	ldi	r24, 0x32	; 50
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 81 00 	call	0x102	; 0x102 <_Z4waitic>
	PORTC ^= 1 << PORTC3;
 1bc:	88 b1       	in	r24, 0x08	; 8
 1be:	c8 27       	eor	r28, r24
 1c0:	c8 b9       	out	0x08, r28	; 8
	wait(50,2);
 1c2:	62 e0       	ldi	r22, 0x02	; 2
 1c4:	82 e3       	ldi	r24, 0x32	; 50
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 81 00 	call	0x102	; 0x102 <_Z4waitic>
	
}
 1cc:	cf 91       	pop	r28
 1ce:	08 95       	ret

000001d0 <main>:
static volatile int counter = 0;
int main(void)
{
    //PC3 - step , PC1 - dir 1 is cw 0 is ccw
	
	DDRC = 0b11111111;
 1d0:	8f ef       	ldi	r24, 0xFF	; 255
 1d2:	87 b9       	out	0x07, r24	; 7
	PORTC = 0b00000000;
 1d4:	18 b8       	out	0x08, r1	; 8
void stepLeft();
void step();

static volatile int counter = 0;
int main(void)
{
 1d6:	c4 e1       	ldi	r28, 0x14	; 20
 1d8:	d0 e0       	ldi	r29, 0x00	; 0
	//PORTC &= ~(1 << PORTC2); //changing direction pin to step right by clearing pc2
    while (1) 
    {
		for (int i = 0; i < 20; i++)
		{
			stepLeft();
 1da:	0e 94 c5 00 	call	0x18a	; 0x18a <_Z8stepLeftv>
 1de:	21 97       	sbiw	r28, 0x01	; 1
	DDRC = 0b11111111;
	PORTC = 0b00000000;
	//PORTC &= ~(1 << PORTC2); //changing direction pin to step right by clearing pc2
    while (1) 
    {
		for (int i = 0; i < 20; i++)
 1e0:	e1 f7       	brne	.-8      	; 0x1da <main+0xa>
		{
			stepLeft();
		}
		wait(2000,2);
 1e2:	62 e0       	ldi	r22, 0x02	; 2
 1e4:	80 ed       	ldi	r24, 0xD0	; 208
 1e6:	97 e0       	ldi	r25, 0x07	; 7
 1e8:	0e 94 81 00 	call	0x102	; 0x102 <_Z4waitic>
 1ec:	c4 e1       	ldi	r28, 0x14	; 20
 1ee:	d0 e0       	ldi	r29, 0x00	; 0
		for (int i = 0; i < 20; i++){
			stepRight();
 1f0:	0e 94 a2 00 	call	0x144	; 0x144 <_Z9stepRightv>
 1f4:	21 97       	sbiw	r28, 0x01	; 1
		for (int i = 0; i < 20; i++)
		{
			stepLeft();
		}
		wait(2000,2);
		for (int i = 0; i < 20; i++){
 1f6:	79 f3       	breq	.-34     	; 0x1d6 <main+0x6>
 1f8:	fb cf       	rjmp	.-10     	; 0x1f0 <main+0x20>

000001fa <_exit>:
 1fa:	f8 94       	cli

000001fc <__stop_program>:
 1fc:	ff cf       	rjmp	.-2      	; 0x1fc <__stop_program>
