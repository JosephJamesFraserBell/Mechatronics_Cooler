
stepper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000316  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000316  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000316  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000348  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f48  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006de  00000000  00000000  00001320  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000080f  00000000  00000000  000019fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000010c  00000000  00000000  00002210  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000487  00000000  00000000  0000231c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009dc  00000000  00000000  000027a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000317f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 a2 00 	jmp	0x144	; 0x144 <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 2b 01 	call	0x256	; 0x256 <main>
  88:	0c 94 4f 01 	jmp	0x29e	; 0x29e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <_Z19delay_T_msec_timer1c>:
while (multiple > 0) {
    delay_T_msec_timer1(time_choice);
    multiple--;
}
} // end wait()
void delay_T_msec_timer1(volatile char choice) {
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	1f 92       	push	r1
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	89 83       	std	Y+1, r24	; 0x01
	//Default: T = .0156 msec for no prescaler and count of 250 (preload counter with 65,535-5)

	//Inputs: None
	//Outputs: None

	TCCR1A = 0x00; // clears WGM00 and WGM01 (bits 0 and 1) to ensure Timer/Counter is in normal mode.
  9c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCNT1 = 0;  // preload load TIMER1 with 5 if counting to 255 (count must reach 65,535-5 = 250)
  a0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  a4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	// or preload with 0 and count to 250

	switch ( choice ) { // choose prescaler
  a8:	89 81       	ldd	r24, Y+1	; 0x01
  aa:	82 30       	cpi	r24, 0x02	; 2
  ac:	69 f0       	breq	.+26     	; 0xc8 <_Z19delay_T_msec_timer1c+0x38>
  ae:	18 f4       	brcc	.+6      	; 0xb6 <_Z19delay_T_msec_timer1c+0x26>
  b0:	81 30       	cpi	r24, 0x01	; 1
  b2:	31 f0       	breq	.+12     	; 0xc0 <_Z19delay_T_msec_timer1c+0x30>
  b4:	17 c0       	rjmp	.+46     	; 0xe4 <_Z19delay_T_msec_timer1c+0x54>
  b6:	83 30       	cpi	r24, 0x03	; 3
  b8:	59 f0       	breq	.+22     	; 0xd0 <_Z19delay_T_msec_timer1c+0x40>
  ba:	84 30       	cpi	r24, 0x04	; 4
  bc:	79 f0       	breq	.+30     	; 0xdc <_Z19delay_T_msec_timer1c+0x4c>
  be:	12 c0       	rjmp	.+36     	; 0xe4 <_Z19delay_T_msec_timer1c+0x54>
		case 1:
		TCCR1B = 1<<CS11;//TCCR1B = 0x02; // Start TIMER1, Normal mode, crystal clock, prescaler = 8
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		break;
  c6:	07 c0       	rjmp	.+14     	; 0xd6 <_Z19delay_T_msec_timer1c+0x46>
		case 2:
		TCCR1B =  1<<CS11 | 1<<CS10;//TCCR1B = 0x03;  // Start TIMER1, Normal mode, crystal clock, prescaler = 64
  c8:	83 e0       	ldi	r24, 0x03	; 3
  ca:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		break;
  ce:	03 c0       	rjmp	.+6      	; 0xd6 <_Z19delay_T_msec_timer1c+0x46>
		case 3:
		TCCR1B = 1<<CS12;//TCCR1B = 0x04; // Start TIMER1, Normal mode, crystal clock, prescaler = 256
  d0:	84 e0       	ldi	r24, 0x04	; 4
  d2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		break;
	}

	//while ((TIFR1 & (0x1<<TOV1)) == 0); // wait for TOV1 to roll over at 255 (requires preload of 65,535-5 to make count = 250)
	// How does this while loop work?? See notes
	while (TCNT1 < 0xfa); // exits when count = 250 (requires preload of 0 to make count = 250)
  d6:	e4 e8       	ldi	r30, 0x84	; 132
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	08 c0       	rjmp	.+16     	; 0xec <_Z19delay_T_msec_timer1c+0x5c>
		break;
		case 3:
		TCCR1B = 1<<CS12;//TCCR1B = 0x04; // Start TIMER1, Normal mode, crystal clock, prescaler = 256
		break;
		case 4:
		TCCR1B = 1<<CS12 | 1<<CS10;//TCCR1B = 0x05; // Start TIMER1, Normal mode, crystal clock, prescaler = 1024
  dc:	85 e0       	ldi	r24, 0x05	; 5
  de:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		break;
  e2:	f9 cf       	rjmp	.-14     	; 0xd6 <_Z19delay_T_msec_timer1c+0x46>
		default:
		TCCR1A = 1<<CS10;//TCCR1B = 0x01; Start TIMER1, Normal mode, crystal clock, no prescaler
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
		break;
  ea:	f5 cf       	rjmp	.-22     	; 0xd6 <_Z19delay_T_msec_timer1c+0x46>
	}

	//while ((TIFR1 & (0x1<<TOV1)) == 0); // wait for TOV1 to roll over at 255 (requires preload of 65,535-5 to make count = 250)
	// How does this while loop work?? See notes
	while (TCNT1 < 0xfa); // exits when count = 250 (requires preload of 0 to make count = 250)
  ec:	80 81       	ld	r24, Z
  ee:	91 81       	ldd	r25, Z+1	; 0x01
  f0:	8a 3f       	cpi	r24, 0xFA	; 250
  f2:	91 05       	cpc	r25, r1
  f4:	d8 f3       	brcs	.-10     	; 0xec <_Z19delay_T_msec_timer1c+0x5c>

	TCCR1B = 0x00; // Stop TIMER1
  f6:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	//TIFR1 = 0x1<<TOV1;  // Clear TOV1 (note that this is an odd bit in that it
	//is cleared by writing a 1 to it)

} // end delay_T_msec_timer1()
  fa:	0f 90       	pop	r0
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	08 95       	ret

00000102 <_Z4waitic>:
		
    }
	return 0;
}

void wait(volatile int multiple, volatile char time_choice) {
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	00 d0       	rcall	.+0      	; 0x108 <_Z4waitic+0x6>
 108:	1f 92       	push	r1
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
 10e:	9a 83       	std	Y+2, r25	; 0x02
 110:	89 83       	std	Y+1, r24	; 0x01
 112:	6b 83       	std	Y+3, r22	; 0x03
created by the called function.
    Inputs: multiple = number of multiples to delay, where multiple is
the number of times an actual delay loop is called.
    Outputs: None
*/
while (multiple > 0) {
 114:	89 81       	ldd	r24, Y+1	; 0x01
 116:	9a 81       	ldd	r25, Y+2	; 0x02
 118:	18 16       	cp	r1, r24
 11a:	19 06       	cpc	r1, r25
 11c:	6c f4       	brge	.+26     	; 0x138 <_Z4waitic+0x36>
    delay_T_msec_timer1(time_choice);
 11e:	8b 81       	ldd	r24, Y+3	; 0x03
 120:	0e 94 48 00 	call	0x90	; 0x90 <_Z19delay_T_msec_timer1c>
    multiple--;
 124:	89 81       	ldd	r24, Y+1	; 0x01
 126:	9a 81       	ldd	r25, Y+2	; 0x02
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	9a 83       	std	Y+2, r25	; 0x02
 12c:	89 83       	std	Y+1, r24	; 0x01
created by the called function.
    Inputs: multiple = number of multiples to delay, where multiple is
the number of times an actual delay loop is called.
    Outputs: None
*/
while (multiple > 0) {
 12e:	89 81       	ldd	r24, Y+1	; 0x01
 130:	9a 81       	ldd	r25, Y+2	; 0x02
 132:	18 16       	cp	r1, r24
 134:	19 06       	cpc	r1, r25
 136:	9c f3       	brlt	.-26     	; 0x11e <_Z4waitic+0x1c>
    delay_T_msec_timer1(time_choice);
    multiple--;
}
} // end wait()
 138:	0f 90       	pop	r0
 13a:	0f 90       	pop	r0
 13c:	0f 90       	pop	r0
 13e:	df 91       	pop	r29
 140:	cf 91       	pop	r28
 142:	08 95       	ret

00000144 <__vector_2>:
	//TIFR1 = 0x1<<TOV1;  // Clear TOV1 (note that this is an odd bit in that it
	//is cleared by writing a 1 to it)

} // end delay_T_msec_timer1()

ISR(INT1_vect) {
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	2f 93       	push	r18
 150:	3f 93       	push	r19
 152:	4f 93       	push	r20
 154:	5f 93       	push	r21
 156:	6f 93       	push	r22
 158:	7f 93       	push	r23
 15a:	8f 93       	push	r24
 15c:	9f 93       	push	r25
 15e:	af 93       	push	r26
 160:	bf 93       	push	r27
 162:	ef 93       	push	r30
 164:	ff 93       	push	r31
	if (counter <= 264) {
 166:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 16a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 16e:	89 30       	cpi	r24, 0x09	; 9
 170:	91 40       	sbci	r25, 0x01	; 1
 172:	3c f4       	brge	.+14     	; 0x182 <__vector_2+0x3e>
		PORTD = PORTD & 0b01111111;
 174:	5f 98       	cbi	0x0b, 7	; 11
		wait(1000,2);
 176:	62 e0       	ldi	r22, 0x02	; 2
 178:	88 ee       	ldi	r24, 0xE8	; 232
 17a:	93 e0       	ldi	r25, 0x03	; 3
 17c:	0e 94 81 00 	call	0x102	; 0x102 <_Z4waitic>
 180:	14 c0       	rjmp	.+40     	; 0x1aa <__vector_2+0x66>
	}
	else if (counter <= 528) {
 182:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 186:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 18a:	81 31       	cpi	r24, 0x11	; 17
 18c:	92 40       	sbci	r25, 0x02	; 2
 18e:	3c f4       	brge	.+14     	; 0x19e <__vector_2+0x5a>
		PORTD = PORTD & 0b10111111;
 190:	5e 98       	cbi	0x0b, 6	; 11
		wait(1000,2);
 192:	62 e0       	ldi	r22, 0x02	; 2
 194:	88 ee       	ldi	r24, 0xE8	; 232
 196:	93 e0       	ldi	r25, 0x03	; 3
 198:	0e 94 81 00 	call	0x102	; 0x102 <_Z4waitic>
 19c:	06 c0       	rjmp	.+12     	; 0x1aa <__vector_2+0x66>
	}
	else {
		PORTD = PORTD & 0b11011111;
 19e:	5d 98       	cbi	0x0b, 5	; 11
		wait(1000,2);
 1a0:	62 e0       	ldi	r22, 0x02	; 2
 1a2:	88 ee       	ldi	r24, 0xE8	; 232
 1a4:	93 e0       	ldi	r25, 0x03	; 3
 1a6:	0e 94 81 00 	call	0x102	; 0x102 <_Z4waitic>
	}
	PORTD = PORTD | 0b11110111;
 1aa:	8b b1       	in	r24, 0x0b	; 11
 1ac:	87 6f       	ori	r24, 0xF7	; 247
 1ae:	8b b9       	out	0x0b, r24	; 11
	//EIFR = EIFR | 1<<INTF1;

}
 1b0:	ff 91       	pop	r31
 1b2:	ef 91       	pop	r30
 1b4:	bf 91       	pop	r27
 1b6:	af 91       	pop	r26
 1b8:	9f 91       	pop	r25
 1ba:	8f 91       	pop	r24
 1bc:	7f 91       	pop	r23
 1be:	6f 91       	pop	r22
 1c0:	5f 91       	pop	r21
 1c2:	4f 91       	pop	r20
 1c4:	3f 91       	pop	r19
 1c6:	2f 91       	pop	r18
 1c8:	0f 90       	pop	r0
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	0f 90       	pop	r0
 1ce:	1f 90       	pop	r1
 1d0:	18 95       	reti

000001d2 <_Z9stepRighti>:

int stepRight(int counter_value){
 1d2:	0f 93       	push	r16
 1d4:	1f 93       	push	r17
 1d6:	cf 93       	push	r28
 1d8:	8c 01       	movw	r16, r24
	int counter_right = counter_value + 1;
	PORTC &= ~(1 << PORTB1); //changing direction to step right by clearing pc1
 1da:	41 98       	cbi	0x08, 1	; 8
	wait(5,2);
 1dc:	62 e0       	ldi	r22, 0x02	; 2
 1de:	85 e0       	ldi	r24, 0x05	; 5
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 81 00 	call	0x102	; 0x102 <_Z4waitic>
	PORTC ^= 1 << PORTB3;
 1e6:	88 b1       	in	r24, 0x08	; 8
 1e8:	c8 e0       	ldi	r28, 0x08	; 8
 1ea:	8c 27       	eor	r24, r28
 1ec:	88 b9       	out	0x08, r24	; 8
	wait(1,1);
 1ee:	61 e0       	ldi	r22, 0x01	; 1
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 81 00 	call	0x102	; 0x102 <_Z4waitic>
	PORTC ^= 1 << PORTB3;
 1f8:	88 b1       	in	r24, 0x08	; 8
 1fa:	c8 27       	eor	r28, r24
 1fc:	c8 b9       	out	0x08, r28	; 8
	wait(1,1);
 1fe:	61 e0       	ldi	r22, 0x01	; 1
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 81 00 	call	0x102	; 0x102 <_Z4waitic>
	
	return counter_right;
}
 208:	c8 01       	movw	r24, r16
 20a:	01 96       	adiw	r24, 0x01	; 1
 20c:	cf 91       	pop	r28
 20e:	1f 91       	pop	r17
 210:	0f 91       	pop	r16
 212:	08 95       	ret

00000214 <_Z8stepLefti>:

int stepLeft(int counter_value){
 214:	0f 93       	push	r16
 216:	1f 93       	push	r17
 218:	cf 93       	push	r28
 21a:	8c 01       	movw	r16, r24
	int counter_left = counter_value - 1;
	PORTC |= 1 << PORTB1; //changing directon pin to step left by setting pc1
 21c:	41 9a       	sbi	0x08, 1	; 8
	wait(5,2);
 21e:	62 e0       	ldi	r22, 0x02	; 2
 220:	85 e0       	ldi	r24, 0x05	; 5
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 81 00 	call	0x102	; 0x102 <_Z4waitic>
	PORTC ^= 1 << PORTB3;
 228:	88 b1       	in	r24, 0x08	; 8
 22a:	c8 e0       	ldi	r28, 0x08	; 8
 22c:	8c 27       	eor	r24, r28
 22e:	88 b9       	out	0x08, r24	; 8
	wait(1,1);
 230:	61 e0       	ldi	r22, 0x01	; 1
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 81 00 	call	0x102	; 0x102 <_Z4waitic>
	PORTC ^= 1 << PORTB3;
 23a:	88 b1       	in	r24, 0x08	; 8
 23c:	c8 27       	eor	r28, r24
 23e:	c8 b9       	out	0x08, r28	; 8
	wait(1,1);
 240:	61 e0       	ldi	r22, 0x01	; 1
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 81 00 	call	0x102	; 0x102 <_Z4waitic>
	
	return counter_left;
}
 24a:	c8 01       	movw	r24, r16
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	cf 91       	pop	r28
 250:	1f 91       	pop	r17
 252:	0f 91       	pop	r16
 254:	08 95       	ret

00000256 <main>:

int main(void)
{
    //PC3 - step , PC1 - dir 1 is cw 0 is ccw
	
	DDRB = 0b11111111;
 256:	8f ef       	ldi	r24, 0xFF	; 255
 258:	84 b9       	out	0x04, r24	; 4
	DDRD = 0b11110111;
 25a:	87 ef       	ldi	r24, 0xF7	; 247
 25c:	8a b9       	out	0x0a, r24	; 10
	PORTB = 0b00110100;
 25e:	94 e3       	ldi	r25, 0x34	; 52
 260:	95 b9       	out	0x05, r25	; 5
	PORTD = 0b11110111;
 262:	8b b9       	out	0x0b, r24	; 11
	EICRA = 0b00001000;
 264:	88 e0       	ldi	r24, 0x08	; 8
 266:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = 1<<INT1;
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	8d bb       	out	0x1d, r24	; 29
	sei();
 26e:	78 94       	sei
	
	int local_counter = 0;
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	c0 e2       	ldi	r28, 0x20	; 32
 276:	d3 e0       	ldi	r29, 0x03	; 3
    while (1) 
    {
		for (int i = 0; i < 800; i++)
		{
			
			local_counter = stepRight(local_counter);
 278:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <_Z9stepRighti>
			counter = local_counter;
 27c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 280:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 284:	21 97       	sbiw	r28, 0x01	; 1
	
	int local_counter = 0;
	//PORTC &= ~(1 << PORTC2); //changing direction pin to step right by clearing pc2
    while (1) 
    {
		for (int i = 0; i < 800; i++)
 286:	c1 f7       	brne	.-16     	; 0x278 <main+0x22>
 288:	c0 e2       	ldi	r28, 0x20	; 32
 28a:	d3 e0       	ldi	r29, 0x03	; 3
			local_counter = stepRight(local_counter);
			counter = local_counter;
		}

		for (int i = 0; i < 800; i++){
			local_counter = stepLeft(local_counter);
 28c:	0e 94 0a 01 	call	0x214	; 0x214 <_Z8stepLefti>
			counter = local_counter;
 290:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 294:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 298:	21 97       	sbiw	r28, 0x01	; 1
			
			local_counter = stepRight(local_counter);
			counter = local_counter;
		}

		for (int i = 0; i < 800; i++){
 29a:	c1 f7       	brne	.-16     	; 0x28c <main+0x36>
 29c:	eb cf       	rjmp	.-42     	; 0x274 <main+0x1e>

0000029e <_exit>:
 29e:	f8 94       	cli

000002a0 <__stop_program>:
 2a0:	ff cf       	rjmp	.-2      	; 0x2a0 <__stop_program>
