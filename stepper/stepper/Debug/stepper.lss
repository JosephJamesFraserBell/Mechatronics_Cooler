
stepper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000158  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000072a  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000649  00000000  00000000  00000976  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000242  00000000  00000000  00000fbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001204  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003be  00000000  00000000  00001268  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000103  00000000  00000000  00001626  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001729  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 9a 00 	call	0x134	; 0x134 <main>
  78:	0c 94 aa 00 	jmp	0x154	; 0x154 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z19delay_T_msec_timer1c>:
while (multiple > 0) {
    delay_T_msec_timer1(time_choice);
    multiple--;
}
} // end wait()
void delay_T_msec_timer1(volatile char choice) {
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	1f 92       	push	r1
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	89 83       	std	Y+1, r24	; 0x01
	//Default: T = .0156 msec for no prescaler and count of 250 (preload counter with 65,535-5)

	//Inputs: None
	//Outputs: None

	TCCR1A = 0x00; // clears WGM00 and WGM01 (bits 0 and 1) to ensure Timer/Counter is in normal mode.
  8c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCNT1 = 0;  // preload load TIMER1 with 5 if counting to 255 (count must reach 65,535-5 = 250)
  90:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  94:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	// or preload with 0 and count to 250

	switch ( choice ) { // choose prescaler
  98:	89 81       	ldd	r24, Y+1	; 0x01
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	69 f0       	breq	.+26     	; 0xb8 <_Z19delay_T_msec_timer1c+0x38>
  9e:	18 f4       	brcc	.+6      	; 0xa6 <_Z19delay_T_msec_timer1c+0x26>
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	31 f0       	breq	.+12     	; 0xb0 <_Z19delay_T_msec_timer1c+0x30>
  a4:	17 c0       	rjmp	.+46     	; 0xd4 <_Z19delay_T_msec_timer1c+0x54>
  a6:	83 30       	cpi	r24, 0x03	; 3
  a8:	59 f0       	breq	.+22     	; 0xc0 <_Z19delay_T_msec_timer1c+0x40>
  aa:	84 30       	cpi	r24, 0x04	; 4
  ac:	79 f0       	breq	.+30     	; 0xcc <_Z19delay_T_msec_timer1c+0x4c>
  ae:	12 c0       	rjmp	.+36     	; 0xd4 <_Z19delay_T_msec_timer1c+0x54>
		case 1:
		TCCR1B = 1<<CS11;//TCCR1B = 0x02; // Start TIMER1, Normal mode, crystal clock, prescaler = 8
  b0:	82 e0       	ldi	r24, 0x02	; 2
  b2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		break;
  b6:	07 c0       	rjmp	.+14     	; 0xc6 <_Z19delay_T_msec_timer1c+0x46>
		case 2:
		TCCR1B =  1<<CS11 | 1<<CS10;//TCCR1B = 0x03;  // Start TIMER1, Normal mode, crystal clock, prescaler = 64
  b8:	83 e0       	ldi	r24, 0x03	; 3
  ba:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		break;
  be:	03 c0       	rjmp	.+6      	; 0xc6 <_Z19delay_T_msec_timer1c+0x46>
		case 3:
		TCCR1B = 1<<CS12;//TCCR1B = 0x04; // Start TIMER1, Normal mode, crystal clock, prescaler = 256
  c0:	84 e0       	ldi	r24, 0x04	; 4
  c2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		break;
	}

	//while ((TIFR1 & (0x1<<TOV1)) == 0); // wait for TOV1 to roll over at 255 (requires preload of 65,535-5 to make count = 250)
	// How does this while loop work?? See notes
	while (TCNT1 < 0xfa); // exits when count = 250 (requires preload of 0 to make count = 250)
  c6:	e4 e8       	ldi	r30, 0x84	; 132
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	08 c0       	rjmp	.+16     	; 0xdc <_Z19delay_T_msec_timer1c+0x5c>
		break;
		case 3:
		TCCR1B = 1<<CS12;//TCCR1B = 0x04; // Start TIMER1, Normal mode, crystal clock, prescaler = 256
		break;
		case 4:
		TCCR1B = 1<<CS12 | 1<<CS10;//TCCR1B = 0x05; // Start TIMER1, Normal mode, crystal clock, prescaler = 1024
  cc:	85 e0       	ldi	r24, 0x05	; 5
  ce:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		break;
  d2:	f9 cf       	rjmp	.-14     	; 0xc6 <_Z19delay_T_msec_timer1c+0x46>
		default:
		TCCR1A = 1<<CS10;//TCCR1B = 0x01; Start TIMER1, Normal mode, crystal clock, no prescaler
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
		break;
  da:	f5 cf       	rjmp	.-22     	; 0xc6 <_Z19delay_T_msec_timer1c+0x46>
	}

	//while ((TIFR1 & (0x1<<TOV1)) == 0); // wait for TOV1 to roll over at 255 (requires preload of 65,535-5 to make count = 250)
	// How does this while loop work?? See notes
	while (TCNT1 < 0xfa); // exits when count = 250 (requires preload of 0 to make count = 250)
  dc:	80 81       	ld	r24, Z
  de:	91 81       	ldd	r25, Z+1	; 0x01
  e0:	8a 3f       	cpi	r24, 0xFA	; 250
  e2:	91 05       	cpc	r25, r1
  e4:	d8 f3       	brcs	.-10     	; 0xdc <_Z19delay_T_msec_timer1c+0x5c>

	TCCR1B = 0x00; // Stop TIMER1
  e6:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	//TIFR1 = 0x1<<TOV1;  // Clear TOV1 (note that this is an odd bit in that it
	//is cleared by writing a 1 to it)

} // end delay_T_msec_timer1()
  ea:	0f 90       	pop	r0
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	08 95       	ret

000000f2 <_Z4waitic>:
		PORTC &= ~(1 << PORTC3);
		wait(10,2);
    }
}

void wait(volatile int multiple, volatile char time_choice) {
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	00 d0       	rcall	.+0      	; 0xf8 <_Z4waitic+0x6>
  f8:	1f 92       	push	r1
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
  fe:	9a 83       	std	Y+2, r25	; 0x02
 100:	89 83       	std	Y+1, r24	; 0x01
 102:	6b 83       	std	Y+3, r22	; 0x03
created by the called function.
    Inputs: multiple = number of multiples to delay, where multiple is
the number of times an actual delay loop is called.
    Outputs: None
*/
while (multiple > 0) {
 104:	89 81       	ldd	r24, Y+1	; 0x01
 106:	9a 81       	ldd	r25, Y+2	; 0x02
 108:	18 16       	cp	r1, r24
 10a:	19 06       	cpc	r1, r25
 10c:	6c f4       	brge	.+26     	; 0x128 <_Z4waitic+0x36>
    delay_T_msec_timer1(time_choice);
 10e:	8b 81       	ldd	r24, Y+3	; 0x03
 110:	0e 94 40 00 	call	0x80	; 0x80 <_Z19delay_T_msec_timer1c>
    multiple--;
 114:	89 81       	ldd	r24, Y+1	; 0x01
 116:	9a 81       	ldd	r25, Y+2	; 0x02
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	9a 83       	std	Y+2, r25	; 0x02
 11c:	89 83       	std	Y+1, r24	; 0x01
created by the called function.
    Inputs: multiple = number of multiples to delay, where multiple is
the number of times an actual delay loop is called.
    Outputs: None
*/
while (multiple > 0) {
 11e:	89 81       	ldd	r24, Y+1	; 0x01
 120:	9a 81       	ldd	r25, Y+2	; 0x02
 122:	18 16       	cp	r1, r24
 124:	19 06       	cpc	r1, r25
 126:	9c f3       	brlt	.-26     	; 0x10e <_Z4waitic+0x1c>
    delay_T_msec_timer1(time_choice);
    multiple--;
}
} // end wait()
 128:	0f 90       	pop	r0
 12a:	0f 90       	pop	r0
 12c:	0f 90       	pop	r0
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <main>:

int main(void)
{
    //PC3 - step , PC2 - dir
	
	DDRC = 0b11111111;
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	87 b9       	out	0x07, r24	; 7
	
    while (1) 
    {
		PORTC = 0b11111111;
 138:	cf ef       	ldi	r28, 0xFF	; 255
 13a:	c8 b9       	out	0x08, r28	; 8
		wait(10,2);
 13c:	62 e0       	ldi	r22, 0x02	; 2
 13e:	8a e0       	ldi	r24, 0x0A	; 10
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 79 00 	call	0xf2	; 0xf2 <_Z4waitic>
		PORTC &= ~(1 << PORTC3);
 146:	43 98       	cbi	0x08, 3	; 8
		wait(10,2);
 148:	62 e0       	ldi	r22, 0x02	; 2
 14a:	8a e0       	ldi	r24, 0x0A	; 10
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 79 00 	call	0xf2	; 0xf2 <_Z4waitic>
 152:	f3 cf       	rjmp	.-26     	; 0x13a <main+0x6>

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>
