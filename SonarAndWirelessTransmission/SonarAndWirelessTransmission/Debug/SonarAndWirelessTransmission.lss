
SonarAndWirelessTransmission.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000150  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000001c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000862  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000071b  00000000  00000000  00000aee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003f7  00000000  00000000  00001209  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  00001600  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d4  00000000  00000000  000016d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001b4  00000000  00000000  00001bac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001d60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_1>
   8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 95 00 	call	0x12a	; 0x12a <main>
  88:	0c 94 a6 00 	jmp	0x14c	; 0x14c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_1>:
// Function to transmit the data
void initialize_usart(void) // function to set up USART
{
	UCSR0B = (1<<TXEN0); // enable serial transmission
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00) ; // Asynchronous mode, 8-bit data; no parity; 1 stop bit
	UBRR0L = 0x67; // 9,600 baud if Fosc = 16MHz
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <counter>
  a0:	8f 5f       	subi	r24, 0xFF	; 255
  a2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <counter>
  a6:	82 30       	cpi	r24, 0x02	; 2
  a8:	28 f0       	brcs	.+10     	; 0xb4 <__vector_1+0x24>
  aa:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <counter>
  ae:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <ButtonValue>
  b2:	05 c0       	rjmp	.+10     	; 0xbe <__vector_1+0x2e>
  b4:	81 30       	cpi	r24, 0x01	; 1
  b6:	19 f4       	brne	.+6      	; 0xbe <__vector_1+0x2e>
  b8:	8e eb       	ldi	r24, 0xBE	; 190
  ba:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ButtonValue>
  be:	e0 9a       	sbi	0x1c, 0	; 28
  c0:	8f 91       	pop	r24
  c2:	0f 90       	pop	r0
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	0f 90       	pop	r0
  c8:	1f 90       	pop	r1
  ca:	18 95       	reti

000000cc <__vector_2>:
  cc:	1f 92       	push	r1
  ce:	0f 92       	push	r0
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	0f 92       	push	r0
  d4:	11 24       	eor	r1, r1
  d6:	8f 93       	push	r24
  d8:	9f 93       	push	r25
  da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  de:	8f 5f       	subi	r24, 0xFF	; 255
  e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  e4:	82 30       	cpi	r24, 0x02	; 2
  e6:	28 f0       	brcs	.+10     	; 0xf2 <__vector_2+0x26>
  e8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <counter>
  ec:	96 e4       	ldi	r25, 0x46	; 70
  ee:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <ButtonValue>
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	19 f4       	brne	.+6      	; 0xfc <__vector_2+0x30>
  f6:	8c e8       	ldi	r24, 0x8C	; 140
  f8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ButtonValue>
  fc:	e1 9a       	sbi	0x1c, 1	; 28
  fe:	9f 91       	pop	r25
 100:	8f 91       	pop	r24
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

0000010c <_Z9sendPulsev>:
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	88 b9       	out	0x08, r24	; 8
 110:	85 e0       	ldi	r24, 0x05	; 5
 112:	8a 95       	dec	r24
 114:	f1 f7       	brne	.-4      	; 0x112 <_Z9sendPulsev+0x6>
 116:	18 b8       	out	0x08, r1	; 8
 118:	08 95       	ret

0000011a <_Z19transmit_data_usarth>:
}

void transmit_data_usart(unsigned char x) // Function to transmit a character
{
	while (!(UCSR0A & (1<<UDRE0))); // Poll to make sure transmit buffer is ready,
 11a:	e0 ec       	ldi	r30, 0xC0	; 192
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	90 81       	ld	r25, Z
 120:	95 ff       	sbrs	r25, 5
 122:	fd cf       	rjmp	.-6      	; 0x11e <_Z19transmit_data_usarth+0x4>
	// then send data
	UDR0 = x;
 124:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 128:	08 95       	ret

0000012a <main>:
unsigned char counter = 0; // This will be used in INT0
unsigned char counter2 = 0; // This will be used in INT1

int main(void)
{
	DDRC = 0b00000001;
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	87 b9       	out	0x07, r24	; 7
	DDRD = 0b00000000;
 12e:	1a b8       	out	0x0a, r1	; 10
	PORTC = 0b00000001;
 130:	88 b9       	out	0x08, r24	; 8
	EICRA = 0b00001010;
 132:	8a e0       	ldi	r24, 0x0A	; 10
 134:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = 1<<INT0 | 1<<INT1;
 138:	83 e0       	ldi	r24, 0x03	; 3
 13a:	8d bb       	out	0x1d, r24	; 29
	sei();
 13c:	78 94       	sei

    while (1) 
    {
		sendPulse();
 13e:	0e 94 86 00 	call	0x10c	; 0x10c <_Z9sendPulsev>
		transmit_data_usart(ButtonValue);
 142:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ButtonValue>
 146:	0e 94 8d 00 	call	0x11a	; 0x11a <_Z19transmit_data_usarth>
 14a:	f9 cf       	rjmp	.-14     	; 0x13e <main+0x14>

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
