
Main_Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000494  00000528  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000494  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  0000052a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000052a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000055c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000973  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006fa  00000000  00000000  00000f67  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000560  00000000  00000000  00001661  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000012c  00000000  00000000  00001bc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000487  00000000  00000000  00001cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000480  00000000  00000000  00002177  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000025f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e9       	ldi	r30, 0x94	; 148
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 87 01 	call	0x30e	; 0x30e <main>
  9e:	0c 94 48 02 	jmp	0x490	; 0x490 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z16initialize_usartv>:
void wait_stepper(volatile int multiple, volatile char time_choice) {
	while (multiple > 0) {
		delay_T_msec_timer1(time_choice);
		multiple--;
	}
}
  a6:	80 e1       	ldi	r24, 0x10	; 16
  a8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  ac:	86 e0       	ldi	r24, 0x06	; 6
  ae:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  b2:	87 e6       	ldi	r24, 0x67	; 103
  b4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  b8:	08 95       	ret

000000ba <_Z19delay_T_msec_timer1c>:
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	1f 92       	push	r1
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
  c4:	89 83       	std	Y+1, r24	; 0x01
  c6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  ca:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  ce:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  d2:	89 81       	ldd	r24, Y+1	; 0x01
  d4:	82 30       	cpi	r24, 0x02	; 2
  d6:	69 f0       	breq	.+26     	; 0xf2 <_Z19delay_T_msec_timer1c+0x38>
  d8:	18 f4       	brcc	.+6      	; 0xe0 <_Z19delay_T_msec_timer1c+0x26>
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	31 f0       	breq	.+12     	; 0xea <_Z19delay_T_msec_timer1c+0x30>
  de:	17 c0       	rjmp	.+46     	; 0x10e <_Z19delay_T_msec_timer1c+0x54>
  e0:	83 30       	cpi	r24, 0x03	; 3
  e2:	59 f0       	breq	.+22     	; 0xfa <_Z19delay_T_msec_timer1c+0x40>
  e4:	84 30       	cpi	r24, 0x04	; 4
  e6:	79 f0       	breq	.+30     	; 0x106 <_Z19delay_T_msec_timer1c+0x4c>
  e8:	12 c0       	rjmp	.+36     	; 0x10e <_Z19delay_T_msec_timer1c+0x54>
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f0:	07 c0       	rjmp	.+14     	; 0x100 <_Z19delay_T_msec_timer1c+0x46>
  f2:	83 e0       	ldi	r24, 0x03	; 3
  f4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f8:	03 c0       	rjmp	.+6      	; 0x100 <_Z19delay_T_msec_timer1c+0x46>
  fa:	84 e0       	ldi	r24, 0x04	; 4
  fc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 100:	e4 e8       	ldi	r30, 0x84	; 132
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	08 c0       	rjmp	.+16     	; 0x116 <_Z19delay_T_msec_timer1c+0x5c>
 106:	85 e0       	ldi	r24, 0x05	; 5
 108:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 10c:	f9 cf       	rjmp	.-14     	; 0x100 <_Z19delay_T_msec_timer1c+0x46>
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 114:	f5 cf       	rjmp	.-22     	; 0x100 <_Z19delay_T_msec_timer1c+0x46>
 116:	80 81       	ld	r24, Z
 118:	91 81       	ldd	r25, Z+1	; 0x01
 11a:	8a 3f       	cpi	r24, 0xFA	; 250
 11c:	91 05       	cpc	r25, r1
 11e:	d8 f3       	brcs	.-10     	; 0x116 <_Z19delay_T_msec_timer1c+0x5c>
 120:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 124:	0f 90       	pop	r0
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	08 95       	ret

0000012c <_Z4waitic>:
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	00 d0       	rcall	.+0      	; 0x132 <_Z4waitic+0x6>
 132:	1f 92       	push	r1
 134:	cd b7       	in	r28, 0x3d	; 61
 136:	de b7       	in	r29, 0x3e	; 62
 138:	9a 83       	std	Y+2, r25	; 0x02
 13a:	89 83       	std	Y+1, r24	; 0x01
 13c:	6b 83       	std	Y+3, r22	; 0x03
 13e:	89 81       	ldd	r24, Y+1	; 0x01
 140:	9a 81       	ldd	r25, Y+2	; 0x02
 142:	18 16       	cp	r1, r24
 144:	19 06       	cpc	r1, r25
 146:	9c f4       	brge	.+38     	; 0x16e <_Z4waitic+0x42>
 148:	8b 81       	ldd	r24, Y+3	; 0x03
 14a:	0e 94 5d 00 	call	0xba	; 0xba <_Z19delay_T_msec_timer1c>
 14e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <ButtonValue>
 152:	81 32       	cpi	r24, 0x21	; 33
 154:	10 f0       	brcs	.+4      	; 0x15a <_Z4waitic+0x2e>
 156:	1a 82       	std	Y+2, r1	; 0x02
 158:	19 82       	std	Y+1, r1	; 0x01
 15a:	89 81       	ldd	r24, Y+1	; 0x01
 15c:	9a 81       	ldd	r25, Y+2	; 0x02
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	9a 83       	std	Y+2, r25	; 0x02
 162:	89 83       	std	Y+1, r24	; 0x01
 164:	89 81       	ldd	r24, Y+1	; 0x01
 166:	9a 81       	ldd	r25, Y+2	; 0x02
 168:	18 16       	cp	r1, r24
 16a:	19 06       	cpc	r1, r25
 16c:	6c f3       	brlt	.-38     	; 0x148 <_Z4waitic+0x1c>
 16e:	0f 90       	pop	r0
 170:	0f 90       	pop	r0
 172:	0f 90       	pop	r0
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	08 95       	ret

0000017a <__vector_2>:
	//TIFR1 = 0x1<<TOV1;  // Clear TOV1 (note that this is an odd bit in that it
	//is cleared by writing a 1 to it)

} // end delay_T_msec_timer1()

ISR(INT1_vect) {
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	2f 93       	push	r18
 186:	3f 93       	push	r19
 188:	4f 93       	push	r20
 18a:	5f 93       	push	r21
 18c:	6f 93       	push	r22
 18e:	7f 93       	push	r23
 190:	8f 93       	push	r24
 192:	9f 93       	push	r25
 194:	af 93       	push	r26
 196:	bf 93       	push	r27
 198:	ef 93       	push	r30
 19a:	ff 93       	push	r31
	
	//PORTB &= ~(1 << PORTB0);
	//PORTB &= ~(1 << PORTB3);
	
	while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
 19c:	e0 ec       	ldi	r30, 0xC0	; 192
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	88 23       	and	r24, r24
 1a4:	ec f7       	brge	.-6      	; 0x1a0 <__vector_2+0x26>
	ButtonValue = UDR0; // Read the data
 1a6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <ButtonValue>
	
	if (counter <= 264) {
 1ae:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1b2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 1b6:	89 30       	cpi	r24, 0x09	; 9
 1b8:	91 40       	sbci	r25, 0x01	; 1
 1ba:	34 f4       	brge	.+12     	; 0x1c8 <__vector_2+0x4e>
		//PORTD = PORTD & 0b01111111;
		wait(250,2);
 1bc:	62 e0       	ldi	r22, 0x02	; 2
 1be:	8a ef       	ldi	r24, 0xFA	; 250
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	0e 94 96 00 	call	0x12c	; 0x12c <_Z4waitic>
 1c6:	14 c0       	rjmp	.+40     	; 0x1f0 <__vector_2+0x76>
	}
	else if (counter <= 528) {
 1c8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1cc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 1d0:	81 31       	cpi	r24, 0x11	; 17
 1d2:	92 40       	sbci	r25, 0x02	; 2
 1d4:	3c f4       	brge	.+14     	; 0x1e4 <__vector_2+0x6a>
		PORTD = PORTD & 0b10111111;
 1d6:	5e 98       	cbi	0x0b, 6	; 11
		wait(250,2);
 1d8:	62 e0       	ldi	r22, 0x02	; 2
 1da:	8a ef       	ldi	r24, 0xFA	; 250
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 96 00 	call	0x12c	; 0x12c <_Z4waitic>
 1e2:	06 c0       	rjmp	.+12     	; 0x1f0 <__vector_2+0x76>
	}
	else {
		PORTD = PORTD & 0b11011111;
 1e4:	5d 98       	cbi	0x0b, 5	; 11
		wait(250,2);
 1e6:	62 e0       	ldi	r22, 0x02	; 2
 1e8:	8a ef       	ldi	r24, 0xFA	; 250
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 96 00 	call	0x12c	; 0x12c <_Z4waitic>
	}
	PORTD = PORTD | 0b11110111;
 1f0:	8b b1       	in	r24, 0x0b	; 11
 1f2:	87 6f       	ori	r24, 0xF7	; 247
 1f4:	8b b9       	out	0x0b, r24	; 11
	
	// PERFORM ACTION DEPENDING ON WHAT VALUE WAS RECIEVED FROM THE WIRELESS TRANSMITTER
	if (ButtonValue <= 35){
 1f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <ButtonValue>
 1fa:	84 32       	cpi	r24, 0x24	; 36
 1fc:	18 f4       	brcc	.+6      	; 0x204 <__vector_2+0x8a>
		//PORTB = 0b11111101;
		OCR0A = 255;       // Load $00 into OCR0 to set initial duty cycle to 0 (motor off)
 1fe:	8f ef       	ldi	r24, 0xFF	; 255
 200:	87 bd       	out	0x27, r24	; 39
		OCR0B = 255;
 202:	88 bd       	out	0x28, r24	; 40
	}
	while (ButtonValue > 35 && ButtonValue <= 105) {
 204:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <ButtonValue>
 208:	9c ed       	ldi	r25, 0xDC	; 220
 20a:	98 0f       	add	r25, r24
 20c:	96 34       	cpi	r25, 0x46	; 70
 20e:	90 f4       	brcc	.+36     	; 0x234 <__vector_2+0xba>
		//PORTB = 0b11111011;
		
		// READ THE VALUES FROM THE WIRELESS TRANSMITTER
		while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
 210:	e0 ec       	ldi	r30, 0xC0	; 192
 212:	f0 e0       	ldi	r31, 0x00	; 0
		ButtonValue = UDR0; // Read the data
 214:	a6 ec       	ldi	r26, 0xC6	; 198
 216:	b0 e0       	ldi	r27, 0x00	; 0
	}
	while (ButtonValue > 35 && ButtonValue <= 105) {
		//PORTB = 0b11111011;
		
		// READ THE VALUES FROM THE WIRELESS TRANSMITTER
		while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
 218:	80 81       	ld	r24, Z
 21a:	88 23       	and	r24, r24
 21c:	ec f7       	brge	.-6      	; 0x218 <__vector_2+0x9e>
		ButtonValue = UDR0; // Read the data
 21e:	8c 91       	ld	r24, X
 220:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <ButtonValue>
		
		OCR0A = 0;       // Load $00 into OCR0 to set initial duty cycle to 0 (motor off)
 224:	17 bc       	out	0x27, r1	; 39
		OCR0B = 0;
 226:	18 bc       	out	0x28, r1	; 40
	if (ButtonValue <= 35){
		//PORTB = 0b11111101;
		OCR0A = 255;       // Load $00 into OCR0 to set initial duty cycle to 0 (motor off)
		OCR0B = 255;
	}
	while (ButtonValue > 35 && ButtonValue <= 105) {
 228:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <ButtonValue>
 22c:	9c ed       	ldi	r25, 0xDC	; 220
 22e:	98 0f       	add	r25, r24
 230:	96 34       	cpi	r25, 0x46	; 70
 232:	90 f3       	brcs	.-28     	; 0x218 <__vector_2+0x9e>
		ButtonValue = UDR0; // Read the data
		
		OCR0A = 0;       // Load $00 into OCR0 to set initial duty cycle to 0 (motor off)
		OCR0B = 0;
	}
	if (ButtonValue > 105 && ButtonValue <= 175) {
 234:	8a 56       	subi	r24, 0x6A	; 106
 236:	86 34       	cpi	r24, 0x46	; 70
 238:	10 f4       	brcc	.+4      	; 0x23e <__vector_2+0xc4>
		//PORTB = 0b11110111;
		OCR0A = 0;       // Load $00 into OCR0 to set initial duty cycle to 0 (motor off)
 23a:	17 bc       	out	0x27, r1	; 39
		OCR0B = 0;
 23c:	18 bc       	out	0x28, r1	; 40
	}
	while (ButtonValue >= 175) {
 23e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <ButtonValue>
 242:	8f 3a       	cpi	r24, 0xAF	; 175
 244:	80 f0       	brcs	.+32     	; 0x266 <__vector_2+0xec>
		//PORTB = 0b11101111;
		
		while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
 246:	e0 ec       	ldi	r30, 0xC0	; 192
 248:	f0 e0       	ldi	r31, 0x00	; 0
		ButtonValue = UDR0; // Read the data
 24a:	a6 ec       	ldi	r26, 0xC6	; 198
 24c:	b0 e0       	ldi	r27, 0x00	; 0
		OCR0B = 0;
	}
	while (ButtonValue >= 175) {
		//PORTB = 0b11101111;
		
		while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
 24e:	80 81       	ld	r24, Z
 250:	88 23       	and	r24, r24
 252:	ec f7       	brge	.-6      	; 0x24e <__vector_2+0xd4>
		ButtonValue = UDR0; // Read the data
 254:	8c 91       	ld	r24, X
 256:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <ButtonValue>
		
		OCR0A = 0;       // Load $00 into OCR0 to set initial duty cycle to 0 (motor off)
 25a:	17 bc       	out	0x27, r1	; 39
		OCR0B = 0;
 25c:	18 bc       	out	0x28, r1	; 40
	if (ButtonValue > 105 && ButtonValue <= 175) {
		//PORTB = 0b11110111;
		OCR0A = 0;       // Load $00 into OCR0 to set initial duty cycle to 0 (motor off)
		OCR0B = 0;
	}
	while (ButtonValue >= 175) {
 25e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <ButtonValue>
 262:	8f 3a       	cpi	r24, 0xAF	; 175
 264:	a0 f7       	brcc	.-24     	; 0x24e <__vector_2+0xd4>
		OCR0A = 0;       // Load $00 into OCR0 to set initial duty cycle to 0 (motor off)
		OCR0B = 0;
	}
	
	
	EIFR = EIFR | 1<<INTF1;
 266:	e1 9a       	sbi	0x1c, 1	; 28

}
 268:	ff 91       	pop	r31
 26a:	ef 91       	pop	r30
 26c:	bf 91       	pop	r27
 26e:	af 91       	pop	r26
 270:	9f 91       	pop	r25
 272:	8f 91       	pop	r24
 274:	7f 91       	pop	r23
 276:	6f 91       	pop	r22
 278:	5f 91       	pop	r21
 27a:	4f 91       	pop	r20
 27c:	3f 91       	pop	r19
 27e:	2f 91       	pop	r18
 280:	0f 90       	pop	r0
 282:	0f be       	out	0x3f, r0	; 63
 284:	0f 90       	pop	r0
 286:	1f 90       	pop	r1
 288:	18 95       	reti

0000028a <_Z9stepRighti>:

int stepRight(int counter_value){
 28a:	0f 93       	push	r16
 28c:	1f 93       	push	r17
 28e:	cf 93       	push	r28
 290:	8c 01       	movw	r16, r24
	int counter_right = counter_value + 1;
	PORTC &= ~(1 << PORTC1); //changing direction to step right by clearing pc1
 292:	41 98       	cbi	0x08, 1	; 8
	wait(5,2);
 294:	62 e0       	ldi	r22, 0x02	; 2
 296:	85 e0       	ldi	r24, 0x05	; 5
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 96 00 	call	0x12c	; 0x12c <_Z4waitic>
	PORTC ^= 1 << PORTC3;
 29e:	88 b1       	in	r24, 0x08	; 8
 2a0:	c8 e0       	ldi	r28, 0x08	; 8
 2a2:	8c 27       	eor	r24, r28
 2a4:	88 b9       	out	0x08, r24	; 8
	wait(1,1);
 2a6:	61 e0       	ldi	r22, 0x01	; 1
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 96 00 	call	0x12c	; 0x12c <_Z4waitic>
	PORTC ^= 1 << PORTC3;
 2b0:	88 b1       	in	r24, 0x08	; 8
 2b2:	c8 27       	eor	r28, r24
 2b4:	c8 b9       	out	0x08, r28	; 8
	wait(1,1);
 2b6:	61 e0       	ldi	r22, 0x01	; 1
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	0e 94 96 00 	call	0x12c	; 0x12c <_Z4waitic>
	
	return counter_right;
}
 2c0:	c8 01       	movw	r24, r16
 2c2:	01 96       	adiw	r24, 0x01	; 1
 2c4:	cf 91       	pop	r28
 2c6:	1f 91       	pop	r17
 2c8:	0f 91       	pop	r16
 2ca:	08 95       	ret

000002cc <_Z8stepLefti>:

int stepLeft(int counter_value){
 2cc:	0f 93       	push	r16
 2ce:	1f 93       	push	r17
 2d0:	cf 93       	push	r28
 2d2:	8c 01       	movw	r16, r24
	int counter_left = counter_value - 1;
	PORTC |= 1 << PORTC1; //changing directon pin to step left by setting pc1
 2d4:	41 9a       	sbi	0x08, 1	; 8
	wait(5,2);
 2d6:	62 e0       	ldi	r22, 0x02	; 2
 2d8:	85 e0       	ldi	r24, 0x05	; 5
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 96 00 	call	0x12c	; 0x12c <_Z4waitic>
	PORTC ^= 1 << PORTC3;
 2e0:	88 b1       	in	r24, 0x08	; 8
 2e2:	c8 e0       	ldi	r28, 0x08	; 8
 2e4:	8c 27       	eor	r24, r28
 2e6:	88 b9       	out	0x08, r24	; 8
	wait(1,1);
 2e8:	61 e0       	ldi	r22, 0x01	; 1
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 96 00 	call	0x12c	; 0x12c <_Z4waitic>
	PORTC ^= 1 << PORTC3;
 2f2:	88 b1       	in	r24, 0x08	; 8
 2f4:	c8 27       	eor	r28, r24
 2f6:	c8 b9       	out	0x08, r28	; 8
	wait(1,1);
 2f8:	61 e0       	ldi	r22, 0x01	; 1
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 96 00 	call	0x12c	; 0x12c <_Z4waitic>
	
	return counter_left;
 302:	c8 01       	movw	r24, r16
 304:	01 97       	sbiw	r24, 0x01	; 1
 306:	cf 91       	pop	r28
 308:	1f 91       	pop	r17
 30a:	0f 91       	pop	r16
 30c:	08 95       	ret

0000030e <main>:
unsigned char ButtonValue = 50;

int main(void)
{	
	// INITIALIZE PORTS AND REGISTERS
	DDRB = 0b11111111; // This register is for the wheel motors (PB0-PB3 for the h-bridge)
 30e:	8f ef       	ldi	r24, 0xFF	; 255
 310:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b11111111; // This register is for the stepper motor (PC1-PC5)
 312:	87 b9       	out	0x07, r24	; 7
	DDRD = 0b11110111;
 314:	97 ef       	ldi	r25, 0xF7	; 247
 316:	9a b9       	out	0x0a, r25	; 10
	PORTB = 0b11111010; // PB1-4 will be the lights to test the buttons //current setup is forward i.e. pb1 and 4 active
 318:	2a ef       	ldi	r18, 0xFA	; 250
 31a:	25 b9       	out	0x05, r18	; 5
	PORTC = 0b00110100;
 31c:	24 e3       	ldi	r18, 0x34	; 52
 31e:	28 b9       	out	0x08, r18	; 8
	PORTD = 0b11110111;
 320:	9b b9       	out	0x0b, r25	; 11
	
	// INTERRUPT STUFF
	EICRA = 0b00001000;
 322:	98 e0       	ldi	r25, 0x08	; 8
 324:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = 1<<INT1;
 328:	92 e0       	ldi	r25, 0x02	; 2
 32a:	9d bb       	out	0x1d, r25	; 29
	sei();
 32c:	78 94       	sei
	
	// MOTOR STUFF
	OCR0A = 255;       // Load $00 into OCR0 to set initial duty cycle to 0 (motor off)
 32e:	87 bd       	out	0x27, r24	; 39
	OCR0B = 255;
 330:	88 bd       	out	0x28, r24	; 40
	TCCR0A = 1<<COM0A1 | 0<<COM0A0  | 1<<COM0B1 | 0<<COM0B0 | 1<<WGM01 | 1<<WGM00;      // Set non-inverting mode on OC0A pin (COMA1:0 = 10; Fast PWM (WGM1:0 bits = bits 1:0 = 11) (Note that we are not affecting OC0B because COMB0:1 bits stay at default = 00)
 332:	83 ea       	ldi	r24, 0xA3	; 163
 334:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0<<CS02 | 1<<CS01 | 1<<CS00; // Set base PWM frequency (CS02:0 - bits 2-0 = 011 for prescaler of 64, for approximately 1kHz base frequency)
 336:	83 e0       	ldi	r24, 0x03	; 3
 338:	85 bd       	out	0x25, r24	; 37

	// INITIALIZE LOCAL VARIABLES
	int local_counter = 0;
	
	// INITIALIZE WIRELESS RECIEVER
	initialize_usart(); // Initialize the USART with desired parameters
 33a:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z16initialize_usartv>
	TCCR0A = 1<<COM0A1 | 0<<COM0A0  | 1<<COM0B1 | 0<<COM0B0 | 1<<WGM01 | 1<<WGM00;      // Set non-inverting mode on OC0A pin (COMA1:0 = 10; Fast PWM (WGM1:0 bits = bits 1:0 = 11) (Note that we are not affecting OC0B because COMB0:1 bits stay at default = 00)
	TCCR0B = 0<<CS02 | 1<<CS01 | 1<<CS00; // Set base PWM frequency (CS02:0 - bits 2-0 = 011 for prescaler of 64, for approximately 1kHz base frequency)
	// PWM is now running on selected pin at selected base frequency.  Duty cycle is set by loading/changing value in OCR0A register.

	// INITIALIZE LOCAL VARIABLES
	int local_counter = 0;
 33e:	20 e0       	ldi	r18, 0x00	; 0
 340:	30 e0       	ldi	r19, 0x00	; 0
	initialize_usart(); // Initialize the USART with desired parameters
	
	while (1)
	{
		
		while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
 342:	c0 ec       	ldi	r28, 0xC0	; 192
 344:	d0 e0       	ldi	r29, 0x00	; 0
		ButtonValue = UDR0; // Read the data
 346:	06 ec       	ldi	r16, 0xC6	; 198
 348:	10 e0       	ldi	r17, 0x00	; 0
			while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
			ButtonValue = UDR0; // Read the data
			
			// PERFORM ACTION DEPENDING ON WHAT VALUE WAS RECIEVED FROM THE WIRELESS TRANSMITTER
			if (ButtonValue <= 35){
				OCR0A = 255;       // Load $00 into OCR0 to set initial duty cycle to 0 (motor off)
 34a:	dd 24       	eor	r13, r13
 34c:	da 94       	dec	r13
	initialize_usart(); // Initialize the USART with desired parameters
	
	while (1)
	{
		
		while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
 34e:	88 81       	ld	r24, Y
 350:	88 23       	and	r24, r24
 352:	ec f7       	brge	.-6      	; 0x34e <main+0x40>
		ButtonValue = UDR0; // Read the data
 354:	f8 01       	movw	r30, r16
 356:	80 81       	ld	r24, Z
 358:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <ButtonValue>
 35c:	0f 2e       	mov	r0, r31
 35e:	f0 e2       	ldi	r31, 0x20	; 32
 360:	ef 2e       	mov	r14, r31
 362:	f3 e0       	ldi	r31, 0x03	; 3
 364:	ff 2e       	mov	r15, r31
 366:	f0 2d       	mov	r31, r0
		
		for (int i = 0; i < 800; i++){
			// THIS IS TO GET THE STEPPER MOTOR TO PAN TO THE LEFT
			local_counter = stepRight(local_counter);
 368:	c9 01       	movw	r24, r18
 36a:	0e 94 45 01 	call	0x28a	; 0x28a <_Z9stepRighti>
 36e:	9c 01       	movw	r18, r24
			counter = local_counter;
 370:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 374:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
			
			// READ THE VALUES FROM THE WIRELESS TRANSMITTER
			while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
 378:	88 81       	ld	r24, Y
 37a:	88 23       	and	r24, r24
 37c:	ec f7       	brge	.-6      	; 0x378 <main+0x6a>
			ButtonValue = UDR0; // Read the data
 37e:	f8 01       	movw	r30, r16
 380:	80 81       	ld	r24, Z
 382:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <ButtonValue>
			
			// PERFORM ACTION DEPENDING ON WHAT VALUE WAS RECIEVED FROM THE WIRELESS TRANSMITTER
			if (ButtonValue <= 35){
 386:	84 32       	cpi	r24, 0x24	; 36
 388:	10 f4       	brcc	.+4      	; 0x38e <main+0x80>
				OCR0A = 255;       // Load $00 into OCR0 to set initial duty cycle to 0 (motor off)
 38a:	d7 bc       	out	0x27, r13	; 39
				OCR0B = 255;
 38c:	d8 bc       	out	0x28, r13	; 40
			}
			while (ButtonValue > 35 && ButtonValue <= 105) {
 38e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <ButtonValue>
 392:	8c ed       	ldi	r24, 0xDC	; 220
 394:	89 0f       	add	r24, r25
 396:	86 34       	cpi	r24, 0x46	; 70
 398:	78 f4       	brcc	.+30     	; 0x3b8 <main+0xaa>
				//PORTB = 0b11111011;
				
				// READ THE VALUES FROM THE WIRELESS TRANSMITTER
				while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
 39a:	98 81       	ld	r25, Y
 39c:	99 23       	and	r25, r25
 39e:	ec f7       	brge	.-6      	; 0x39a <main+0x8c>
				ButtonValue = UDR0; // Read the data
 3a0:	f8 01       	movw	r30, r16
 3a2:	80 81       	ld	r24, Z
 3a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <ButtonValue>
				
				OCR0A = 0;       // Load $00 into OCR0 to set initial duty cycle to 0 (motor off)
 3a8:	17 bc       	out	0x27, r1	; 39
				OCR0B = 0;
 3aa:	18 bc       	out	0x28, r1	; 40
			// PERFORM ACTION DEPENDING ON WHAT VALUE WAS RECIEVED FROM THE WIRELESS TRANSMITTER
			if (ButtonValue <= 35){
				OCR0A = 255;       // Load $00 into OCR0 to set initial duty cycle to 0 (motor off)
				OCR0B = 255;
			}
			while (ButtonValue > 35 && ButtonValue <= 105) {
 3ac:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <ButtonValue>
 3b0:	8c ed       	ldi	r24, 0xDC	; 220
 3b2:	89 0f       	add	r24, r25
 3b4:	86 34       	cpi	r24, 0x46	; 70
 3b6:	88 f3       	brcs	.-30     	; 0x39a <main+0x8c>
				ButtonValue = UDR0; // Read the data
				
				OCR0A = 0;       // Load $00 into OCR0 to set initial duty cycle to 0 (motor off)
				OCR0B = 0;
			}
			if (ButtonValue > 105 && ButtonValue <= 175) {
 3b8:	9a 56       	subi	r25, 0x6A	; 106
 3ba:	96 34       	cpi	r25, 0x46	; 70
 3bc:	10 f4       	brcc	.+4      	; 0x3c2 <main+0xb4>
				//PORTB = 0b11110111;
				OCR0A = 0;       // Load $00 into OCR0 to set initial duty cycle to 0 (motor off)
 3be:	17 bc       	out	0x27, r1	; 39
				OCR0B = 0;
 3c0:	18 bc       	out	0x28, r1	; 40
			}
			while (ButtonValue >= 175) {
 3c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <ButtonValue>
 3c6:	8f 3a       	cpi	r24, 0xAF	; 175
 3c8:	68 f0       	brcs	.+26     	; 0x3e4 <main+0xd6>
				//PORTB = 0b11101111;
				
				while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
 3ca:	98 81       	ld	r25, Y
 3cc:	99 23       	and	r25, r25
 3ce:	ec f7       	brge	.-6      	; 0x3ca <main+0xbc>
				ButtonValue = UDR0; // Read the data
 3d0:	f8 01       	movw	r30, r16
 3d2:	80 81       	ld	r24, Z
 3d4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <ButtonValue>
				
				OCR0A = 0;       // Load $00 into OCR0 to set initial duty cycle to 0 (motor off)
 3d8:	17 bc       	out	0x27, r1	; 39
				OCR0B = 0;
 3da:	18 bc       	out	0x28, r1	; 40
			if (ButtonValue > 105 && ButtonValue <= 175) {
				//PORTB = 0b11110111;
				OCR0A = 0;       // Load $00 into OCR0 to set initial duty cycle to 0 (motor off)
				OCR0B = 0;
			}
			while (ButtonValue >= 175) {
 3dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <ButtonValue>
 3e0:	8f 3a       	cpi	r24, 0xAF	; 175
 3e2:	98 f7       	brcc	.-26     	; 0x3ca <main+0xbc>
 3e4:	f1 e0       	ldi	r31, 0x01	; 1
 3e6:	ef 1a       	sub	r14, r31
 3e8:	f1 08       	sbc	r15, r1
	{
		
		while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
		ButtonValue = UDR0; // Read the data
		
		for (int i = 0; i < 800; i++){
 3ea:	09 f0       	breq	.+2      	; 0x3ee <main+0xe0>
 3ec:	bd cf       	rjmp	.-134    	; 0x368 <main+0x5a>
				OCR0A = 0;       // Load $00 into OCR0 to set initial duty cycle to 0 (motor off)
				OCR0B = 0;
			}
		}*/
		
		while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
 3ee:	88 81       	ld	r24, Y
 3f0:	88 23       	and	r24, r24
 3f2:	ec f7       	brge	.-6      	; 0x3ee <main+0xe0>
		ButtonValue = UDR0; // Read the data
 3f4:	f8 01       	movw	r30, r16
 3f6:	80 81       	ld	r24, Z
 3f8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <ButtonValue>
 3fc:	0f 2e       	mov	r0, r31
 3fe:	f0 e2       	ldi	r31, 0x20	; 32
 400:	ef 2e       	mov	r14, r31
 402:	f3 e0       	ldi	r31, 0x03	; 3
 404:	ff 2e       	mov	r15, r31
 406:	f0 2d       	mov	r31, r0

		for (int i = 0; i < 800; i++){
			// THIS IS TO GET THE STEPPER MOTOR TO PAN TO THE LEFT
			local_counter = stepLeft(local_counter);
 408:	c9 01       	movw	r24, r18
 40a:	0e 94 66 01 	call	0x2cc	; 0x2cc <_Z8stepLefti>
 40e:	9c 01       	movw	r18, r24
			counter = local_counter;
 410:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 414:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
			
			// READ THE VALUES FROM THE WIRELESS TRANSMITTER
			while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
 418:	88 81       	ld	r24, Y
 41a:	88 23       	and	r24, r24
 41c:	ec f7       	brge	.-6      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
			ButtonValue = UDR0; // Read the data
 41e:	f8 01       	movw	r30, r16
 420:	80 81       	ld	r24, Z
 422:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <ButtonValue>
			
			// PERFORM ACTION DEPENDING ON WHAT VALUE WAS RECIEVED FROM THE WIRELESS TRANSMITTER
			if (ButtonValue <= 35){
 426:	84 32       	cpi	r24, 0x24	; 36
 428:	10 f4       	brcc	.+4      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
				OCR0A = 255;       // Load $00 into OCR0 to set initial duty cycle to 0 (motor off)
 42a:	d7 bc       	out	0x27, r13	; 39
				OCR0B = 255;
 42c:	d8 bc       	out	0x28, r13	; 40
			}
			while (ButtonValue > 35 && ButtonValue <= 105) {
 42e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <ButtonValue>
 432:	8c ed       	ldi	r24, 0xDC	; 220
 434:	89 0f       	add	r24, r25
 436:	86 34       	cpi	r24, 0x46	; 70
 438:	78 f4       	brcc	.+30     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
				//PORTB = 0b11111011;
				
				// READ THE VALUES FROM THE WIRELESS TRANSMITTER
				while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
 43a:	98 81       	ld	r25, Y
 43c:	99 23       	and	r25, r25
 43e:	ec f7       	brge	.-6      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
				ButtonValue = UDR0; // Read the data
 440:	f8 01       	movw	r30, r16
 442:	80 81       	ld	r24, Z
 444:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <ButtonValue>
				
				OCR0A = 0;       // Load $00 into OCR0 to set initial duty cycle to 0 (motor off)
 448:	17 bc       	out	0x27, r1	; 39
				OCR0B = 0;
 44a:	18 bc       	out	0x28, r1	; 40
			// PERFORM ACTION DEPENDING ON WHAT VALUE WAS RECIEVED FROM THE WIRELESS TRANSMITTER
			if (ButtonValue <= 35){
				OCR0A = 255;       // Load $00 into OCR0 to set initial duty cycle to 0 (motor off)
				OCR0B = 255;
			}
			while (ButtonValue > 35 && ButtonValue <= 105) {
 44c:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <ButtonValue>
 450:	8c ed       	ldi	r24, 0xDC	; 220
 452:	89 0f       	add	r24, r25
 454:	86 34       	cpi	r24, 0x46	; 70
 456:	88 f3       	brcs	.-30     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
				ButtonValue = UDR0; // Read the data
				
				OCR0A = 0;       // Load $00 into OCR0 to set initial duty cycle to 0 (motor off)
				OCR0B = 0;
			}
			if (ButtonValue > 105 && ButtonValue <= 175) {
 458:	9a 56       	subi	r25, 0x6A	; 106
 45a:	96 34       	cpi	r25, 0x46	; 70
 45c:	10 f4       	brcc	.+4      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
				//PORTB = 0b11110111;
				OCR0A = 0;       // Load $00 into OCR0 to set initial duty cycle to 0 (motor off)
 45e:	17 bc       	out	0x27, r1	; 39
				OCR0B = 0;
 460:	18 bc       	out	0x28, r1	; 40
			}
			while (ButtonValue >= 175) {
 462:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <ButtonValue>
 466:	8f 3a       	cpi	r24, 0xAF	; 175
 468:	68 f0       	brcs	.+26     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
				//PORTB = 0b11101111;
				
				while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
 46a:	98 81       	ld	r25, Y
 46c:	99 23       	and	r25, r25
 46e:	ec f7       	brge	.-6      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
				ButtonValue = UDR0; // Read the data
 470:	f8 01       	movw	r30, r16
 472:	80 81       	ld	r24, Z
 474:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <ButtonValue>
				
				OCR0A = 0;       // Load $00 into OCR0 to set initial duty cycle to 0 (motor off)
 478:	17 bc       	out	0x27, r1	; 39
				OCR0B = 0;
 47a:	18 bc       	out	0x28, r1	; 40
			if (ButtonValue > 105 && ButtonValue <= 175) {
				//PORTB = 0b11110111;
				OCR0A = 0;       // Load $00 into OCR0 to set initial duty cycle to 0 (motor off)
				OCR0B = 0;
			}
			while (ButtonValue >= 175) {
 47c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <ButtonValue>
 480:	8f 3a       	cpi	r24, 0xAF	; 175
 482:	98 f7       	brcc	.-26     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 484:	f1 e0       	ldi	r31, 0x01	; 1
 486:	ef 1a       	sub	r14, r31
 488:	f1 08       	sbc	r15, r1
		}*/
		
		while (! (UCSR0A & (1<<RXC0))); // Wait until new data arrives
		ButtonValue = UDR0; // Read the data

		for (int i = 0; i < 800; i++){
 48a:	09 f0       	breq	.+2      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 48c:	bd cf       	rjmp	.-134    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 48e:	5f cf       	rjmp	.-322    	; 0x34e <main+0x40>

00000490 <_exit>:
 490:	f8 94       	cli

00000492 <__stop_program>:
 492:	ff cf       	rjmp	.-2      	; 0x492 <__stop_program>
